<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Harole's blog]]></title>
  <link href="http://harole.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2014-06-13T14:32:04+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript 对象与数组的浅拷贝和深拷贝]]></title>
    <link href="http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope/"/>
    <updated>2013-10-26T17:15:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope</id>
    <content type="html"><![CDATA[<p>一. 浅拷贝</p>

<p>对象浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        newObj[i] = this[i];
    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name : "harole",
    age  : "21"
}

// 复制对象
var newObj = oldObj.clone();

delete newObj.name;
console.log(newObj.name);   // 输出 undefined
console.log(oldObj.name);   // 输出 harole
</code></pre>

<!-- more -->


<p>类似对象浅拷贝，数组浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];
    for ( ; this[i]; ) {
        newArray[i] = this[i++];
    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', '21'];

// 复制对象
var newArray = oldArray.clone();

delete newArray[0];
console.log(newArray[0]);   // 输出 undefined
console.log(oldArray[0]);   // 输出 harole
</code></pre>

<p>很快你会发现，上面的代码只能复制基本类型的属性。对数组、对象和函数无法进行复制。例如：</p>

<pre><code>oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}
</code></pre>

<p>上面的浅拷贝无法实现复制，数组同理，也无法实现复制。于是产生的深拷贝！</p>

<p>二. 深拷贝</p>

<p>深拷贝只能对基本类型的属性复制，所以只需在 clone 函数中，进行拷贝之前加一条判断语句。如果是拷贝的是数组、对象，就跳到 clone 函数执行拷贝。</p>

<p>对象深拷贝：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        // 在这加判断拷贝的数据类型
        if (typeof (this[i]) == 'object' ) {
            newObj[i] = this[i].clone();
        } else {
            newObj[i] = this[i];
        }

    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}

// 复制对象
var newObj = oldObj.clone();

console.log(newObj.info.age);   // 输出 21
</code></pre>

<p>数组深拷贝：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];

    for ( var i = 0, l = this.length; i &lt; l; i++ ) {
        if (typeof (this[i]) == 'object' || typeof (this[i]) == 'array') {
            // 注意：若数组中有对象，则要依赖Object.prototype.clone
            newArray[i] = this[i].clone();
        } else {
            newArray[i] = this[i];
        }

    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', { age: 21, sex: 'man' }];

// 复制对象
var newArray = oldArray.clone();

console.log(newArray[1].age);   // 输出 undefined
</code></pre>

<p>三. 数组的一个方法：concat</p>

<p>concat 方法在 w3school 上定义：用于连接两个或多个数组（简单的数组拼接），接收参数为一个或多个数组，返回合并后的数组。
但是在这里，我们可以通过 concat 方法来实现数组的深拷贝。如下：</p>

<pre><code>var arr = [1, 2, [2, 3], 4];

var arr1 = arr.concat();

console.log(arr1); // 输出 [1, 2, [2, 3], 4]

arr1.length = 0;

console.log(arr1);

console.log(arr1); // 输出 []

console.log(arr);   // 输出 [1, 2, [2, 3], 4]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包原理的深入理解]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply/"/>
    <updated>2013-10-25T15:36:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply</id>
    <content type="html"><![CDATA[<p>在 《<a href="http://www.harole.com/blog/2013/10/25/javascript-simple-closures/">javascript 简单闭包</a>》 一文中提到，闭包包含返回的函数和该函数的定义环境，本文将从函数定义环境和函数执行周期的角度来理解闭包，如有不恰之处，欢迎提出，讨论！先来看一个示例及其结果：</p>

<pre><code>//示例一：
var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>

<p>总结：我们可以发现，示例一中，returnFunVar1 和 returnFunVar2 操作的 funVar 不是同一个变量，var returnFunVar1 = fun();  事实上 fun() 的局部变量随着 fun 执行的结束，即 funVar 也释放了。<!-- more -->而在javascript 简单闭包中，我们知道函数的执行它定义的位置有关，而与执行环境无关。所以，当执行 returnFunvar() 时，就是执行 fun 函数中 inFun 指向的那个匿名函数，而不是 inFun 函数。因为 fun 函数已经执行结束，inFun 已经被释放。当那个匿名函数执行时，发现自己需要 funVar 这个变量。于是为 funVar 在内存上添加一快空间，此时的 funVar 不在是 fun 中的那个 funVar 了（因为已经释放了），我们给它命名为 funVar1。当该匿名函数执行结束后，同样释放局部变量，但是 funVar1 不属于它的局部变量，所以没有释放（可能带来内存泄露）。同理，var returnFunVar2 = fun(); 中的 funVar 为 funVar2，故有示例一展示的结果。</p>

<pre><code>//示例二：
var fun = function () {
    funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5

// 示例三
var global = 0;
var fun = function () {
    var inFun = function () {
         global++;
         return global;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5
</code></pre>

<p>示例二和示例三，不管是隐式还是显式声明的全局变量，因为不会释放变量，所以在闭包中都是指向内存的同一个区域（即指向同一个变量）。故有示例二和示例三的输出结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 简单闭包]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-simple-closures/"/>
    <updated>2013-10-25T15:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-simple-closures</id>
    <content type="html"><![CDATA[<p>通俗的讲，javascript 中每个函数都是一个闭包，但通常意义上是嵌套的函数能够体现出闭包的特性。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar = fun();
console.log(returnFunVar());    // 输出 1
console.log(returnFunVar());    // 输出 2
console.log(returnFunVar());    // 输出 3
</code></pre>

<p>上面一段代码中，fun() 函数中有一个局部变量 funVar，初值为 0,，还有一个 inFun 函数。inFun 函数将其父作用域，即 fun 函数中的 funVar 变量加 1，并返回 funVar。fun 返回的是 inFun 函数，在外部通过变量 returnFunVar 调用获取 fun 的返回值（即 inFun 函数）。</p>

<!-- more -->


<p>按照通用命令式思维的理解，funVar 是 fun 函数内部的变量，它的生命周期就是 fun 函数的执行周期。当 fun 函数从调用栈中返回时，funVar 变量申请的空间也就释放了。问题是，在 fun 执行结束后，inFun 却引用了”已经释放了“的 funVar ，而且没有报错，每次调用还修改了 funVar。这是为什么呢？</p>

<p>这正是所谓闭包的特性，当一个函数返回它内部定义的一个函数时，就产生了闭包。<strong>闭包不仅只是被返回的函数，还包括函数的定义环境。</strong>大家可能对这里的“定义环境”感到疑惑，可以点击这《<a href="http://www.harole.com/blog/2013/10/25/javascript-understand-closures-deeply/">javascript 闭包原理的深入理解</a>》。 fun 可以产生多个闭包，闭包和闭包之间互不影响，可以认为是工厂里的生产同种部件的不同车间。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 数组引用和对象引用]]></title>
    <link href="http://harole.github.com/blog/2013/10/12/javascript-array-quote/"/>
    <updated>2013-10-12T23:22:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/12/javascript-array-quote</id>
    <content type="html"><![CDATA[<pre><code>var a = b = [1,2,3];
a = [];// a 为空数组，b 仍是 [1,2,3]

var a = b = [1,2,3];
a.length = 0;// a，b 为空数组

var a = b = [1,2,3];
a.length = 2;// a，b 为 [1,2]
</code></pre>

<p>总结：换个角度来理解上面那个问题，a, b 都是数组对象 [1,2,3] 的引用，当a = [] 或是 b = [] 改变的只是变量 a，b 的引用对象而已。而是用 a.length = 0 或是 b.length = 0，改变的是数组对象 [1,2,3] 的长度，故有上述实例的结果。</p>

<p>思考：上述数组 a 和 b 保存的都只是数组 [1,2,3] 的引用，那么对与 Object 是否也是引用呢？猜想，引用规则对 Object 同样适用。</p>

<!-- more -->


<p>验证猜想：</p>

<pre><code>// a 为null，b 仍是 { one: 1, two: 2, three: 3 }
var a = b = { one: 1, two: 2, three: 3 };
a = null;

// a，b 为{ one: 1, two: 2 }
var a = b = { one: 1, two: 2, three: 3 };
delete a.three;

// a，b 为 {}
var a = b = { one: 1, two: 2, three: 3 };
for ( number in a ) {

    // 为什么这里使用 [] 的方式调用对象的属性？
    // 因为 for/in 语句，将字面量 one 等转换成字符串 "one" 等
    // 所以 a.number 会变成 a."one"等, 故无法访问
    // 而 a[number] 为 a["one"]，可以正常访问
    delete a[number];
}
</code></pre>

<p>总结：javascript 中两个变量之间赋值传递一个对象或数组，传递的是这个对象或数组的引用。但是在实际中我们希望的是进行拷贝。那么如何实现对象或数组间的拷贝呢？请看《<a href="http://www.harole.com/blog/2013/10/26/javascript-shallow-deep-cope/">javascript 对象与数组的浅拷贝和深拷贝</a>》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 异步初始化大数组]]></title>
    <link href="http://harole.github.com/blog/2013/10/05/initbigarrayasync/"/>
    <updated>2013-10-05T17:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/05/initbigarrayasync</id>
    <content type="html"><![CDATA[<pre><code>    // 任何情况下，创建一个定时器造成UI线程暂停，如同它从一个任务切换到下一个任务
    // THRESHOLD 用于防止 javascript 运行超时，DELAY 用来设置函数调用等待时间
    // 为什么 DELAY 设置为15呢？因为 windows 系统上定时器分辨率为 15 毫秒

    var THRESHOLD = 150, DELAY = 15;

    function initBigArrayAsync(max, cb) {
        var r = [], i = 0;

        function init(startTime) {
            while (i &lt; max) {

                // 判断语句，函数执行的当前时间和开始执行时间差
                // 与限定值（THRESHOLD，该值一般比超时时间小）比较
                // 当小于 THRESHOLD，可进行正常赋值
                if (new Date - startTime &lt; THRESHOLD) {
                    r[i++] = i;
                } else {
</code></pre>

<!-- more -->


<pre><code>                    // 当不小于 THRESHOLD 时，继续执行函数可能会超时
                    // 所以用一个很小的等待时间 DELAY，来从新调用 init() 进行赋值
                    setTimeout(function() {
                        init(new Date);
                    }, DELAY);
                    return;
                }
            }

            cb(r);
        }

        init(new Date);
    }

    // 该函数用于检测，是否成功给大数组赋值
    initBigArrayAsync(1000000, function(arr) {
        console.log(arr.length);
        console.log(arr[1000000 - 1]);
    });
</code></pre>
]]></content>
  </entry>
  
</feed>
