<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Harole's blog]]></title>
  <link href="http://harole.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2014-09-02T23:54:06+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[求两个数组的交集]]></title>
    <link href="http://harole.github.com/blog/2014/09/02/find-same-element-form-two-array/"/>
    <updated>2014-09-02T23:00:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/09/02/find-same-element-form-two-array</id>
    <content type="html"><![CDATA[<p>拿到这样一个问题，首先想到我们需要做的是：用最快的算法取出两个数组中的相同的元素。</p>

<p>上面一句明显是废话，要取出相同的元素，我们必须判断 arr1[i] == arr2[j]</p>

<p>大脑给的第一反应就是：</p>

<pre><code>var arr1 = [1,3,4,5,6];
var arr2 = [2,4,6,8,9];
var r = [];
for (var i = 0, len1 = arr1.length; i &lt; len1; i++) {
    for (var j = 0, len2 = arr2.length; j &lt; len2; j++) {
        if (arr1[i] === arr2[j]) {
           r.push(arr1[i]);
        }
    }
}
</code></pre>

<p>可以很容易的看出上述解决方案，算法复杂度是n平方的。使数组 arr1 中的每个元素和 arr2 数组中每个元素进行了一次判断，真的有必要每个元素都需要判断一次吗？如果数组均为乱序的，这无法必要。但是如果数组为有序的呢？我们知道两个数组的状态：</p>

<blockquote><ol>
<li>arr1[i] === arr2[j]</li>
<li>arr1[i] &lt; arr2[j]</li>
<li>arr1[i] > arr2[j]</li>
</ol>
</blockquote>

<p>当数组为上述状态1时，可获得交集元素；
当数组为上述状态2时，因为数组是顺序的（这里默认从小到大），只需 arr1 对应的序号加 1；
当数组为上述状态3时，同状态2，但这里只需 arr2 对应的序号加 1；
当数组的任意一个数组的计数器达到数组长度时，结束循环。综合上述，可得：</p>

<pre><code>var arr1 = [1,3,4,5,6];
var arr2 = [2,4,6,8,9];
var r = [];
var len1 = arr1.length;
var len2 = arr2.length;
var i = 0;
var j = 0;

while(i&lt;len1&amp;&amp;j&lt;len2) {
    if (arr1[i] === arr2[j]) {
        r.push(arr1[i]);
        i++;
        j++;
    } else if(arr1[i] &lt; arr2[j]) {
        i++;
    } else {
        j++;
    }
}
</code></pre>

<p>可以看出，如果两个数组均为有序数组时，复杂度为2n。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsonp 跨域实现原理]]></title>
    <link href="http://harole.github.com/blog/2014/06/15/jsonp-principle/"/>
    <updated>2014-06-15T20:49:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/06/15/jsonp-principle</id>
    <content type="html"><![CDATA[<p>通过script标签实现跨域请求，并带上回调函数作为参数，后台将json数据作为参数传给回调函数。需要配置环境：Apache + php</p>

<p>一. 前端</p>

<pre><code>function jsonp(url){
    var script = document.createElement('script');
    script.src = url;
    document.body.insertBefore(script, document.body.firstChild);

    // ie8 (包括ie8) 以下不支持 onload，所以这里增加了 onreadystatechange
    script.onload = script.onreadystatechange = function() {

        // 不同浏览器的 readyState 不一致
        if(!script.readyState || script.readyState == "loaded" || script.readyState == "complete"){

            // 释放内存，防止内存泄露
            document.body.removeChild(script);
            script.src = "";
            script = null;
        }
    }
}

jsonp("http://baidu.com/api/jsonp.php?callback=responseFunc");

function responseFunc(response){
    // 对数据进行操作
    console.log(response.name)
}
</code></pre>

<p>二. 后端</p>

<pre><code>&lt;?php
    $data = array('name'=&gt;'harole',"years"=&gt;22);
    $callback = $_GET['callback'];
    echo $callback.'('.json_encode($data).')';
 ?&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 对象与数组的浅拷贝和深拷贝]]></title>
    <link href="http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope/"/>
    <updated>2013-10-26T17:15:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope</id>
    <content type="html"><![CDATA[<p>一. 浅拷贝</p>

<p>对象浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        newObj[i] = this[i];
    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name : "harole",
    age  : "21"
}

// 复制对象
var newObj = oldObj.clone();

delete newObj.name;
console.log(newObj.name);   // 输出 undefined
console.log(oldObj.name);   // 输出 harole
</code></pre>

<!-- more -->


<p>类似对象浅拷贝，数组浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];
    for ( ; this[i]; ) {
        newArray[i] = this[i++];
    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', '21'];

// 复制对象
var newArray = oldArray.clone();

delete newArray[0];
console.log(newArray[0]);   // 输出 undefined
console.log(oldArray[0]);   // 输出 harole
</code></pre>

<p>很快你会发现，上面的代码只能复制基本类型的属性。对数组、对象和函数无法进行复制。例如：</p>

<pre><code>oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}
</code></pre>

<p>上面的浅拷贝无法实现复制，数组同理，也无法实现复制。于是产生的深拷贝！</p>

<p>二. 深拷贝</p>

<p>深拷贝只能对基本类型的属性复制，所以只需在 clone 函数中，进行拷贝之前加一条判断语句。如果是拷贝的是数组、对象，就跳到 clone 函数执行拷贝。</p>

<p>对象深拷贝：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        // 在这加判断拷贝的数据类型
        if (typeof (this[i]) == 'object' ) {
            newObj[i] = this[i].clone();
        } else {
            newObj[i] = this[i];
        }

    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}

// 复制对象
var newObj = oldObj.clone();

console.log(newObj.info.age);   // 输出 21
</code></pre>

<p>数组深拷贝：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];

    for ( var i = 0, l = this.length; i &lt; l; i++ ) {
        if (typeof (this[i]) == 'object' || typeof (this[i]) == 'array') {
            // 注意：若数组中有对象，则要依赖Object.prototype.clone
            newArray[i] = this[i].clone();
        } else {
            newArray[i] = this[i];
        }

    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', { age: 21, sex: 'man' }];

// 复制对象
var newArray = oldArray.clone();

console.log(newArray[1].age);   // 输出 undefined
</code></pre>

<p>三. 数组的一个方法：concat</p>

<p>concat 方法在 w3school 上定义：用于连接两个或多个数组（简单的数组拼接），接收参数为一个或多个数组，返回合并后的数组。
但是在这里，我们可以通过 concat 方法来实现数组的深拷贝。如下：</p>

<pre><code>var arr = [1, 2, [2, 3], 4];

var arr1 = arr.concat();

console.log(arr1); // 输出 [1, 2, [2, 3], 4]

arr1.length = 0;

console.log(arr1);

console.log(arr1); // 输出 []

console.log(arr);   // 输出 [1, 2, [2, 3], 4]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包原理的深入理解]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply/"/>
    <updated>2013-10-25T15:36:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply</id>
    <content type="html"><![CDATA[<p>在 《<a href="http://www.harole.com/blog/2013/10/25/javascript-simple-closures/">javascript 简单闭包</a>》 一文中提到，闭包包含返回的函数和该函数的定义环境，本文将从函数定义环境和函数执行周期的角度来理解闭包，如有不恰之处，欢迎提出，讨论！先来看一个示例及其结果：</p>

<pre><code>//示例一：
var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>

<p>总结：我们可以发现，示例一中，returnFunVar1 和 returnFunVar2 操作的 funVar 不是同一个变量，var returnFunVar1 = fun();  事实上 fun() 的局部变量随着 fun 执行的结束，即 funVar 也释放了。<!-- more -->而在javascript 简单闭包中，我们知道函数的执行它定义的位置有关，而与执行环境无关。所以，当执行 returnFunvar() 时，就是执行 fun 函数中 inFun 指向的那个匿名函数，而不是 inFun 函数。因为 fun 函数已经执行结束，inFun 已经被释放。当那个匿名函数执行时，发现自己需要 funVar 这个变量。于是为 funVar 在内存上添加一快空间，此时的 funVar 不在是 fun 中的那个 funVar 了（因为已经释放了），我们给它命名为 funVar1。当该匿名函数执行结束后，同样释放局部变量，但是 funVar1 不属于它的局部变量，所以没有释放（可能带来内存泄露）。同理，var returnFunVar2 = fun(); 中的 funVar 为 funVar2，故有示例一展示的结果。</p>

<pre><code>//示例二：
var fun = function () {
    funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5

// 示例三
var global = 0;
var fun = function () {
    var inFun = function () {
         global++;
         return global;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5
</code></pre>

<p>示例二和示例三，不管是隐式还是显式声明的全局变量，因为不会释放变量，所以在闭包中都是指向内存的同一个区域（即指向同一个变量）。故有示例二和示例三的输出结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 简单闭包]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-simple-closures/"/>
    <updated>2013-10-25T15:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-simple-closures</id>
    <content type="html"><![CDATA[<p>通俗的讲，javascript 中每个函数都是一个闭包，但通常意义上是嵌套的函数能够体现出闭包的特性。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar = fun();
console.log(returnFunVar());    // 输出 1
console.log(returnFunVar());    // 输出 2
console.log(returnFunVar());    // 输出 3
</code></pre>

<p>上面一段代码中，fun() 函数中有一个局部变量 funVar，初值为 0,，还有一个 inFun 函数。inFun 函数将其父作用域，即 fun 函数中的 funVar 变量加 1，并返回 funVar。fun 返回的是 inFun 函数，在外部通过变量 returnFunVar 调用获取 fun 的返回值（即 inFun 函数）。</p>

<!-- more -->


<p>按照通用命令式思维的理解，funVar 是 fun 函数内部的变量，它的生命周期就是 fun 函数的执行周期。当 fun 函数从调用栈中返回时，funVar 变量申请的空间也就释放了。问题是，在 fun 执行结束后，inFun 却引用了”已经释放了“的 funVar ，而且没有报错，每次调用还修改了 funVar。这是为什么呢？</p>

<p>这正是所谓闭包的特性，当一个函数返回它内部定义的一个函数时，就产生了闭包。<strong>闭包不仅只是被返回的函数，还包括函数的定义环境。</strong>大家可能对这里的“定义环境”感到疑惑，可以点击这《<a href="http://www.harole.com/blog/2013/10/25/javascript-understand-closures-deeply/">javascript 闭包原理的深入理解</a>》。 fun 可以产生多个闭包，闭包和闭包之间互不影响，可以认为是工厂里的生产同种部件的不同车间。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>
]]></content>
  </entry>
  
</feed>
