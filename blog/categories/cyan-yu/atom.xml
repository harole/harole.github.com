<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C言语 | Harole's blog]]></title>
  <link href="http://harole.github.com/blog/categories/cyan-yu/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2013-10-25T15:47:36+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么C语言中数组下标从0开始？]]></title>
    <link href="http://harole.github.com/blog/2013/10/11/c-language-array-start-zero/"/>
    <updated>2013-10-11T20:49:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/11/c-language-array-start-zero</id>
    <content type="html"><![CDATA[<p>最近学习了汇编语言，和一些反汇编调试程序的方法，对语言的实现有了更深的认识。也明白了C语言的数组下标为什么从零开始。有两种理解方式，一般理解和从反汇编代码的角度理解。</p>

<p>首先要理解什么是物理地址：</p>

<blockquote><p>CPU 被划分为不同的段，物理地址由 CS 和 IP 构成，对内存地址进行控制。CS 是基地址（段基址），IP 是偏移地址。CPU 以8086为例：假设 CS 为 2000（16进制），IP 为 0001（16进制），那么物理地址为 CS<em>16 + IP, CS</em>16 即 2000 左移一位 20000， 故物理地址 = 20000 + 0001 = 20001（构成20位的物理地址）。</p></blockquote>

<!-- more -->


<ol>
<li><p>一般理解（粗略理解），可认为是以下方式</p>

<p> 如果下标 i（用下标表示偏移地址）是从 1 开始的，则赋值时我们需要，获得的物理地址 = CS * 16 + (i - 1)，即每次赋值都需要多执行一次减法；</p>

<p> <img src="/images/2013-10-11-22-39-57.png" alt="all have content" /></p>

<p> 如果下标 i（用下标表示偏移地址）是从 0 开始的，则赋值时，获取的物理地址 = CS * 16 + i;</p>

<p> <img src="/images/2013-10-11-cpu.png" alt="all have content" /></p>

<p> 总结：如果数组比较大，则两种方式在时间复杂度上，数组下标从零开始更优！故数组从 0 开始。</p></li>
<li><p>从反汇编的角度来理解（细节理解）</p>

<p> <img src="/images/2013-10-11-22-46-40.png" alt="all have content" /></p>

<p> 001813F6 8B 45 DC             mov         eax,dword ptr [ebp-24h] ，这语句将 [ebp-24h] （即 i 的值）赋给 eax 寄存器；</p>

<p> 001813FC 89 4C 85 E8          mov         dword ptr [ebp+eax<em>4-18h],ecx ，这句将寄存器 ecx 中的值赋给 [ebp+eax</em>4-18h] （即 a[i]），其中 ebp-18h 可以看做 CS，eax*4 为 IP；这里的 4 是4字节（int 类型的长度），这个长度随数组类型的变化而变化。</p>

<p> <img src="/images/2013-10-11-23-14-57.png" alt="all have content" /></p>

<p> 同一般理解中的解释一样，如果数组是从 1 开始，即这里的寄存器每次都要做一次减法，同样带来时间复杂度的增加。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
