<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | Harole's blog]]></title>
  <link href="http://harole.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2014-09-03T13:07:40+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[z-index浅析]]></title>
    <link href="http://harole.github.com/blog/2014/06/29/z-index-principle/"/>
    <updated>2014-06-29T09:56:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/06/29/z-index-principle</id>
    <content type="html"><![CDATA[<p>最近发现对 z-index 的理解不是很深刻，所以到 www.w3.org 上查看了相关内容，以下是个人在查看后对 z-index 的理解。</p>

<p>首先简单介绍一下关于页面上定位的元素，分为 x，y，z 轴的定位。在 position 后的 top 和 left 是对 y，x 轴的位置的定位。而子 z 轴上的定位由 z-index 来决定那个层在上面。</p>

<p>在 DOM 的根节点上默认有一个 root stacking context，当某个元素被设置 position（除了 static）都会生成一个 stacking context，每个 stacking context 中的元素 z-index 默认都是 0，宽度也会和浮动元素一样自适应宽度（不再想 block 元素一样占满正行）。设置 position 的元素，虽然默认值为 0，但是都会位于同一个 stacking context 其他元素之上。示例代码如下：</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;style&gt;
  #text1 {
    /*demo3*/
    /*position: absolute;
    z-index: 5;*/

    background-color: red;
  }
  #text2 {
    position: absolute;
    left: 5px;
    top: 5px;

    /* demo2
     * 让当前的 stacking context 位于
     * father stacking context 其他一般元素之上
     */
    /*z-index: -1;*/

    /*demo3*/
    /*z-index: 2;*/

    background-color: blue;
  }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="text1"&gt;
    this is text1 content.
  &lt;/div&gt;
  &lt;!-- demo3 --&gt;
  &lt;!-- &lt;div class="text1Father"&gt;
    &lt;div id="text1"&gt;
      this is text1 content.
    &lt;/div&gt;
  &lt;/div&gt; --&gt;
  &lt;div id="text2"&gt;
    this is text2 content.
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>因为 #text2 新生成了一个 stacking context，而新生成的 stacking context 的背景是透明的。所以这里需要给 #text2 设置一个背景颜色。demo1 如下：</p>

<p><img src="/images/2014-06-29_11-31-31.png" alt="" /></p>

<p>因为 #text1 和 #text2 同时是位于 root stacking root 下的，所以会想到这里给 #text1 设置一个"z-index: 1;"时 #text1 会位于 #text2 层之上。但是事实上是不会的，因为这里的 #text2 生成了一个 stacking context，新生成的 stacking context 总是位于 father stacking context 之上的。如果希望这个新生成的 stacking context 位于其他一般元素之下，可以给新生成的 stacking context 的 z-index 赋负值。demo2 如下：</p>

<p><img src="/images/2014-06-29_11-32-43.png" alt="" /></p>

<p>当然，也可以给 #text1 设置 position 非 static 值生成一个 stacking context 然后让其 z-index 大于，#text2 的 z-index 值。这里就会有疑问了，可以确定的是两个兄弟元素 #text1 和 #text2 生成的 stacking context 的 father stacking context 都是 root stacking context。但是如果两个元素不是兄弟元素呢？答案也是肯定的，只要两个 stacking context 的第一个祖先 stacking context 是同一个，那么他们就可以使用 z-index 进行判断哪个在上层。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[input ie6,7下双边距问题]]></title>
    <link href="http://harole.github.com/blog/2013/05/19/input-ie67/"/>
    <updated>2013-05-19T10:46:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/05/19/input-ie67</id>
    <content type="html"><![CDATA[<p>一. 先来看 input 产生的几个问题。</p>

<p>情况一：</p>

<hr />

<pre><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;test&lt;/title&gt;         

    &lt;style type="text/css"&gt;

    /* 去除默认的 padding 和 margin */
    * {
        margin: 0;
        padding: 0;
    }

    .has-margins {
        background-color: gray;
        margin-left: 5em;        
    }
    .has-layout {
        background-color: tan;
        width: 30em;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-layout"&gt;
                INPUT tag, type=text:&lt;br&gt;
                &lt;input type="text"&gt;&lt;br&gt;
                INPUT tag, type=checkbox:&lt;br&gt;
                &lt;input type="checkbox"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;      

    &lt;!-- 注释2 --&gt;
    &lt;!-- &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-margins"&gt;
                &lt;div class="has-layout"&gt;
                    INPUT tag, type=text:&lt;br&gt;
                    &lt;input type="text"&gt;&lt;br&gt;
                    INPUT tag, type=checkbox:&lt;br&gt;
                    &lt;input type="checkbox"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt; --&gt; 
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>ie6，7 下 input 和 .has-margin 之间多了 80px（即 .box 的 margin-left 的同时也复制给了 input），如下图:</p>

<p><img src="/images/2013-05-19-input-ie67.png" alt="all have content" /></p>

<!-- more -->


<p>如果将之前的form注释掉，使用注释二中的代码，会得到下图：</p>

<p><img src="/images/2013-06-02-input-ie67-01.png" alt="all have content" /></p>

<p>出现上述bug的原因是，.has-layout 中的 CSS “width: 30em” 出发了 haslayout 让 input 具有继承所有祖先元素的 margin-left 的总和的特性！所以有了上述情况，同理可以将 “width: 30em” 换成 “zoom: 1;”等触发 haslayout ，可以达到同样的结果！</p>

<p>解决方案：</p>

<ol>
<li><p>方案一：
在 input 前加上文本，或是加上 label 元素等行内元素。这也是我们很少发现 bug 的原因，一般而言我们都在 input 的前加上了 label 元素。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;label for=""&gt;Text:&lt;/label&gt; &lt;input type="text"&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>方案二：
给 input 元素包上 span等，只要是没有触发 haslayout 的元素皆可。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;span&gt;&lt;input type="text"&gt;&lt;/span&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>注：并不是所有的 input 元素都会产生此 bug，也许你已经发现前面的 checkbox 就没有此 bug，还有radio，image inputs 会打破 haslayout 因此不会产生 bug！</p></li>
</ol>


<p><strong>原文请链接:</strong><a href="http://www.positioniseverything.net/explorer/inherited_margin.html">http://www.positioniseverything.net/explorer/inherited_margin.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlphamageLoader滤镜解决ie6下png图片透明带来的问题]]></title>
    <link href="http://harole.github.com/blog/2013/04/23/alphamageloader-problem/"/>
    <updated>2013-04-23T22:45:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/23/alphamageloader-problem</id>
    <content type="html"><![CDATA[<p>一. 图片定位</p>

<blockquote><ol>
<li><1>无法使用backgroun-position对图片定位;</li>
<li><2>因为“<1>”导致无法使用CSS Sprite，无法减少http请求;</li>
<li><3>当前大多数网站使用的图片较多，特别在大型网站，因为 “<2>”
将会严重影响页面的加载速度。</li>
</ol>
</blockquote>

<!-- more -->


<p>二. 冻结浏览器</p>

<blockquote><ol>
<li><1> 使用滤镜之后，页面不在支持CSS的渐进渲染了;</li>
<li><2> 在所有必须的组件下载完成之前，页面都是一片空白；</li>
<li><3> ie6会再所以CSS都下载完成后才开始渲染，但是CSS缺依赖于一张经过滤镜处理的图片，所以渲染要等到图片（经过滤镜处理的）加载完成才开始;</li>
<li><4> 如果一个页面上有10张滤镜处理的图片，每张图片加载需要2秒，那么页面的渲染就需要停滞20秒。</li>
</ol>
</blockquote>

<p>总结：在页面中少使用滤镜，否则性能会大大的降低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ie6 下 png 图片透明，滤镜解决方案]]></title>
    <link href="http://harole.github.com/blog/2013/04/21/ie6-png/"/>
    <updated>2013-04-21T23:36:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/21/ie6-png</id>
    <content type="html"><![CDATA[<p>一. 正常情况下（ie6下回出现半透明）：</p>

<pre><code>/* 注：这里一般使用 png24 */
background: url("../images/test.png");
</code></pre>

<p>二. 解决方案：</p>

<pre><code>/* 注： 图片的路径使用的是相对路径 */
background: url("../images/test.png");

/* ie6 下将背景移除 */
_background:none;   

/* 使用AlphaImageLoader滤镜重新加载图片 */
_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src="../images/test.png");
</code></pre>

<!-- more -->


<p>三. 注：上述解决方案在ie6下，有时图片会覆盖文本导致文本消失。</p>

<pre><code>/* 我们需要给滤镜加上一行设置, 即sizingMethod="crop"
 * 使得剪切图片以适应对象的尺寸边界。  
 */
_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src="../images/test.png", sizingMethod="crop");    
</code></pre>

<p><strong>
<a href="http://hi.baidu.com/zygalcn/item/6f9946b8900c33d385dd79e6">更多关于ALphaImageLoader滤镜的属性</a>
</strong></p>
]]></content>
  </entry>
  
</feed>
