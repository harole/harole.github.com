<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harole's blog]]></title>
  <link href="http://harole.github.com/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2014-09-15T20:38:18+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《如何阅读一本书》读后感]]></title>
    <link href="http://harole.github.com/blog/2014/09/15/how-to-read-a-book/"/>
    <updated>2014-09-15T18:59:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/09/15/how-to-read-a-book</id>
    <content type="html"><![CDATA[<p>最近读了《如何阅读一本书》，本文会简单的介绍一下该书的内容、对该书的个人评价和个人阅读后的收获。</p>

<p>一. 主要内容：开始以形象的比喻描述了阅读这么艺术，接着讲述阅读的不同层次的方法和技巧，最后介绍阅读不同类型的书籍的方法。</p>

<ol>
<li><p>阅读的艺术：</p>

<p> 1）阅读被很多人认为是被动的。其实阅读是需要主动的，越主动就能与作者达成共识，获取更多的知识。就想棒球一样，作者是投手，读者是捕手。强调读者和作者是个合作的关系，读者只有主动才能把阅读这件事做好。</p>

<p> 2）阅读的目标有两个，一个是为获取资讯，另一个是为了提高理解能力。</p>

<p> 3）换个角度看待阅读，书籍就是老师，只不过是个不会说话的老师，不会替你解答你的问题。所以需要在你阅读的过程中思考并提出问题，然后独自解答问题。</p></li>
</ol>


<!-- more -->


<ol>
<li><p>阅读的层次：</p>

<p> 1）基础阅读：具备基本的语言能力，例如：在阅读英文文章时，需要认识英文单词和了解英文语法。事实上，应该还需要具备语言文化，否则没办法把基础阅读做好。想起一个笑话：一个中国老师给老外上中文课，问：“小明破门而入，门破了没”。老外回答“破了”。</p>

<p> 2）审视阅读：审视阅读需要确认的几个问题，一本书是什么类型的？主要内容是什么？全书是的架构是怎么样的？作者是如何传达自己要表达的意思的？审视阅读分为两部分，一是略读，简单的浏览目录和序言基本确认这本书的类型。二是粗浅的阅读，阅读每个章节的摘要，摘要不明确时快速阅读部分内容，基本可以确认书籍的主要内容、全书的架构以及作者构思和写书的思路。</p>

<p> 3）分析阅读：主要是阅读文章内容时的一些技巧，一是阅读速度的控制，有自我判断的意识，哪里是需要仔细阅读的（慢点），哪里是需要略看的（快点）；二是拥有自我意识，不能作者说什么就是什么，判断哪里是作者的主观意识，这就像是人与人交流的过程，需要有自己的立场，需要有自己的观点，甚至是质疑作者；三是阅读的技巧，阅读过程中积极发现一些阅读技巧（符号标记、文字上述和使用合适的符号进行标记等）。</p>

<p> 4）主题阅读：针对特定的问题，同一个主题进行的阅读，而不是以书本为中心的阅读。此阅读基于两本以上的书籍，比较他们所谈主题的关系，得出自己的结论。</p></li>
<li><p>如何阅读不同类型的书籍：这部分主要讲了文学、科学和数学等类型书籍的阅读方法，个人看了部分觉得干货不是很多，有“为了写书而写书的嫌疑”。所以个人是跳着看的，只停留在略读层次，所以就不做分析了。</p></li>
</ol>


<p>二. 个人评价：该书在阅读层次部分做的比较好，书籍越往后，内容越虚胖。所以根据该书的介绍，一本书有快读和慢读的部分。在后半部分，深圳前部分，过多冗余例子的部分都采取了快速阅读的方式。</p>

<p>三. 个人收获：部分已在上述“主要内容”里说明，这里在简单的说几点吧。一是阅读是个学习的过程，读后感是个总结的过程。而且本人一直认为总结是学习中获取知识最多的部分。所以总结仅限与老师指导型的学习，也可以是阅读式的非指导型的学习。阅读能力和习惯是个人最珍贵的财富，这样的学习是自己提问、自己解答、自己总结的过程。做自己的老师，从阅读开始。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[requirejs原理]]></title>
    <link href="http://harole.github.com/blog/2014/09/02/requirejs-principle/"/>
    <updated>2014-09-02T23:57:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/09/02/requirejs-principle</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求两个数组的交集]]></title>
    <link href="http://harole.github.com/blog/2014/09/02/find-same-element-form-two-array/"/>
    <updated>2014-09-02T23:00:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/09/02/find-same-element-form-two-array</id>
    <content type="html"><![CDATA[<p>拿到这样一个问题，首先想到我们需要做的是：用最快的算法取出两个数组中的相同的元素。</p>

<p>上面一句明显是废话，要取出相同的元素，我们必须判断 arr1[i] == arr2[j]</p>

<p>大脑给的第一反应就是：</p>

<pre><code>var arr1 = [1,3,4,5,6];
var arr2 = [2,4,6,8,9];
var r = [];
for (var i = 0, len1 = arr1.length; i &lt; len1; i++) {
    for (var j = 0, len2 = arr2.length; j &lt; len2; j++) {
        if (arr1[i] === arr2[j]) {
           r.push(arr1[i]);
        }
    }
}
</code></pre>

<!-- more -->


<p>可以很容易的看出上述解决方案，算法复杂度是n平方的。使数组 arr1 中的每个元素和 arr2 数组中每个元素进行了一次判断，真的有必要每个元素都需要判断一次吗？如果数组均为乱序的，这无法必要。但是如果数组为有序的呢？我们知道两个数组的状态：</p>

<blockquote><ol>
<li>arr1[i] === arr2[j]</li>
<li>arr1[i] &lt; arr2[j]</li>
<li>arr1[i] > arr2[j]</li>
</ol>
</blockquote>

<p>当数组为上述状态1时，可获得交集元素；
当数组为上述状态2时，因为数组是顺序的（这里默认从小到大），只需 arr1 对应的序号加 1；
当数组为上述状态3时，同状态2，但这里只需 arr2 对应的序号加 1；
当数组的任意一个数组的计数器达到数组长度时，结束循环。综合上述，可得：</p>

<pre><code>var arr1 = [1,3,4,5,6];
var arr2 = [2,4,6,8,9];
var r = [];
var len1 = arr1.length;
var len2 = arr2.length;
var i = 0;
var j = 0;

while(i&lt;len1&amp;&amp;j&lt;len2) {
    if (arr1[i] === arr2[j]) {
        r.push(arr1[i]);
        i++;
        j++;
    } else if(arr1[i] &lt; arr2[j]) {
        i++;
    } else {
        j++;
    }
}
</code></pre>

<p>可以看出，如果两个数组均为有序数组时，复杂度为2n。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[z-index浅析]]></title>
    <link href="http://harole.github.com/blog/2014/06/29/z-index-principle/"/>
    <updated>2014-06-29T09:56:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/06/29/z-index-principle</id>
    <content type="html"><![CDATA[<p>最近发现对 z-index 的理解不是很深刻，所以到 www.w3.org 上查看了相关内容，以下是个人在查看后对 z-index 的理解。</p>

<p>首先简单介绍一下关于页面上定位的元素，分为 x，y，z 轴的定位。在 position 后的 top 和 left 是对 y，x 轴的位置的定位。而子 z 轴上的定位由 z-index 来决定那个层在上面。</p>

<p>在 DOM 的根节点上默认有一个 root stacking context，当某个元素被设置 position（除了 static）都会生成一个 stacking context，每个 stacking context 中的元素 z-index 默认都是 0，宽度也会和浮动元素一样自适应宽度（不再想 block 元素一样占满正行）。设置 position 的元素，虽然默认值为 0，但是都会位于同一个 stacking context 其他元素之上。示例代码如下：</p>

<!-- more -->


<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;style&gt;
  #text1 {
    /*demo3*/
    /*position: absolute;
    z-index: 5;*/

    background-color: red;
  }
  #text2 {
    position: absolute;
    left: 5px;
    top: 5px;

    /* demo2
     * 让当前的 stacking context 位于
     * father stacking context 其他一般元素之上
     */
    /*z-index: -1;*/

    /*demo3*/
    /*z-index: 2;*/

    background-color: blue;
  }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="text1"&gt;
    this is text1 content.
  &lt;/div&gt;
  &lt;!-- demo3 --&gt;
  &lt;!-- &lt;div class="text1Father"&gt;
    &lt;div id="text1"&gt;
      this is text1 content.
    &lt;/div&gt;
  &lt;/div&gt; --&gt;
  &lt;div id="text2"&gt;
    this is text2 content.
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>因为 #text2 新生成了一个 stacking context，而新生成的 stacking context 的背景是透明的。所以这里需要给 #text2 设置一个背景颜色。demo1 如下：</p>

<p><img src="http://harole.github.com/images/2014-06-29_11-31-31.png" alt="" /></p>

<p>因为 #text1 和 #text2 同时是位于 root stacking root 下的，所以会想到这里给 #text1 设置一个&#8221;z-index: 1;&#8221;时 #text1 会位于 #text2 层之上。但是事实上是不会的，因为这里的 #text2 生成了一个 stacking context，新生成的 stacking context 总是位于 father stacking context 之上的。如果希望这个新生成的 stacking context 位于其他一般元素之下，可以给新生成的 stacking context 的 z-index 赋负值。demo2 如下：</p>

<p><img src="http://harole.github.com/images/2014-06-29_11-32-43.png" alt="" /></p>

<p>当然，也可以给 #text1 设置 position 非 static 值生成一个 stacking context 然后让其 z-index 大于，#text2 的 z-index 值。这里就会有疑问了，可以确定的是两个兄弟元素 #text1 和 #text2 生成的 stacking context 的 father stacking context 都是 root stacking context。但是如果两个元素不是兄弟元素呢？答案也是肯定的，只要两个 stacking context 的第一个祖先 stacking context 是同一个，那么他们就可以使用 z-index 进行判断哪个在上层。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsonp 跨域实现原理]]></title>
    <link href="http://harole.github.com/blog/2014/06/15/jsonp-principle/"/>
    <updated>2014-06-15T20:49:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/06/15/jsonp-principle</id>
    <content type="html"><![CDATA[<p>通过script标签实现跨域请求，并带上回调函数作为参数，后台将json数据作为参数传给回调函数。需要配置环境：Apache + php</p>

<p>一. 前端</p>

<pre><code>function jsonp(url){
    var script = document.createElement('script');
    script.src = url;
    document.body.insertBefore(script, document.body.firstChild);

    // ie8 (包括ie8) 以下不支持 onload，所以这里增加了 onreadystatechange
    script.onload = script.onreadystatechange = function() {

        // 不同浏览器的 readyState 不一致
        if(!script.readyState || script.readyState == "loaded" || script.readyState == "complete"){

            // 释放内存，防止内存泄露
            document.body.removeChild(script);
            script.src = "";
            script = null;
        }
    }
}
</code></pre>

<!-- more -->


<pre><code>jsonp("http://baidu.com/api/jsonp.php?callback=responseFunc");

function responseFunc(response){
    // 对数据进行操作
    console.log(response.name)
}
</code></pre>

<p>二. 后端</p>

<pre><code>&lt;?php
    $data = array('name'=&gt;'harole',"years"=&gt;22);
    $callback = $_GET['callback'];
    echo $callback.'('.json_encode($data).')';
 ?&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3实现圆环百分比（动画）]]></title>
    <link href="http://harole.github.com/blog/2014/06/12/round-percentage-css3/"/>
    <updated>2014-06-12T19:19:00+08:00</updated>
    <id>http://harole.github.com/blog/2014/06/12/round-percentage-css3</id>
    <content type="html"><![CDATA[<blockquote><p>文章内容分为三个部分，实现方案、逻辑整理和代码实现。</p></blockquote>

<p>一. 实现方案</p>

<pre><code>&lt;!-- 外圆 --&gt;
&lt;div id="roundBox"&gt;

    &lt;!-- 遮挡外圆左半部分，为动画准备 --&gt;
    &lt;div class="roundLeft"&gt;&lt;/div&gt;

    &lt;!-- 遮挡外圆右半部分，为动画准备 --&gt;
    &lt;div class="roundRight"&gt;&lt;/div&gt;

    &lt;!-- 内圆 遮挡 roundLeft 和 roundRight --&gt;
    &lt;div class="roundInner"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<!-- more -->


<p>二. 逻辑整理
<img src="http://harole.github.com/images/2014-06-12-logic.jpg" alt="CSS3实现圆环百分比逻辑图" /></p>

<p>三. 代码实现</p>

<p>该代码基于Jquery，仅支持chrome。<a href="http://jsfiddle.net/harole/5VRW5/embedded/result/">demo点击这里</a>，<a href="http://jsfiddle.net/harole/5VRW5/">完整代码点击这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 对象与数组的浅拷贝和深拷贝]]></title>
    <link href="http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope/"/>
    <updated>2013-10-26T17:15:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/26/javascript-shallow-deep-cope</id>
    <content type="html"><![CDATA[<p>一. 浅拷贝</p>

<p>对象浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        newObj[i] = this[i];
    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name : "harole",
    age  : "21"
}

// 复制对象
var newObj = oldObj.clone();

delete newObj.name;
console.log(newObj.name);   // 输出 undefined
console.log(oldObj.name);   // 输出 harole
</code></pre>

<!-- more -->


<p>类似对象浅拷贝，数组浅拷贝的一般实现：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];
    for ( ; this[i]; ) {
        newArray[i] = this[i++];
    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', '21'];

// 复制对象
var newArray = oldArray.clone();

delete newArray[0];
console.log(newArray[0]);   // 输出 undefined
console.log(oldArray[0]);   // 输出 harole
</code></pre>

<p>很快你会发现，上面的代码只能复制基本类型的属性。对数组、对象和函数无法进行复制。例如：</p>

<pre><code>oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}
</code></pre>

<p>上面的浅拷贝无法实现复制，数组同理，也无法实现复制。于是产生的深拷贝！</p>

<p>二. 深拷贝</p>

<p>深拷贝只能对基本类型的属性复制，所以只需在 clone 函数中，进行拷贝之前加一条判断语句。如果是拷贝的是数组、对象，就跳到 clone 函数执行拷贝。</p>

<p>对象深拷贝：</p>

<pre><code>// 赋值对象方法
Object.prototype.clone = function () {
    var newObj = {};
    for (var i in this) {
        // 在这加判断拷贝的数据类型
        if (typeof (this[i]) == 'object' ) {
            newObj[i] = this[i].clone();
        } else {
            newObj[i] = this[i];
        }

    }
    return newObj;
}

// 待赋值的对象
var oldObj = {
    name: "harole",
    info: {
        age: 21,
        sex: 'man'
    }
}

// 复制对象
var newObj = oldObj.clone();

console.log(newObj.info.age);   // 输出 21
</code></pre>

<p>数组深拷贝：</p>

<pre><code>// 赋值对象方法
Array.prototype.clone = function () {
    var newArray = [];

    for ( var i = 0, l = this.length; i &lt; l; i++ ) {
        if (typeof (this[i]) == 'object' || typeof (this[i]) == 'array') {
            // 注意：若数组中有对象，则要依赖Object.prototype.clone
            newArray[i] = this[i].clone();
        } else {
            newArray[i] = this[i];
        }

    }
    return newArray;
}

// 待赋值的对象
var oldArray = ['harole', { age: 21, sex: 'man' }];

// 复制对象
var newArray = oldArray.clone();

console.log(newArray[1].age);   // 输出 undefined
</code></pre>

<p>三. 数组的一个方法：concat</p>

<p>concat 方法在 w3school 上定义：用于连接两个或多个数组（简单的数组拼接），接收参数为一个或多个数组，返回合并后的数组。
但是在这里，我们可以通过 concat 方法来实现数组的深拷贝。如下：</p>

<pre><code>var arr = [1, 2, [2, 3], 4];

var arr1 = arr.concat();

console.log(arr1); // 输出 [1, 2, [2, 3], 4]

arr1.length = 0;

console.log(arr1);

console.log(arr1); // 输出 []

console.log(arr);   // 输出 [1, 2, [2, 3], 4]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 闭包原理的深入理解]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply/"/>
    <updated>2013-10-25T15:36:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-understand-closures-deeply</id>
    <content type="html"><![CDATA[<p>在 《<a href="http://www.harole.com/blog/2013/10/25/javascript-simple-closures/">javascript 简单闭包</a>》 一文中提到，闭包包含返回的函数和该函数的定义环境，本文将从函数定义环境和函数执行周期的角度来理解闭包，如有不恰之处，欢迎提出，讨论！先来看一个示例及其结果：</p>

<pre><code>//示例一：
var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>

<p>总结：我们可以发现，示例一中，returnFunVar1 和 returnFunVar2 操作的 funVar 不是同一个变量，var returnFunVar1 = fun();  事实上 fun() 的局部变量随着 fun 执行的结束，即 funVar 也释放了。<!-- more -->而在javascript 简单闭包中，我们知道函数的执行它定义的位置有关，而与执行环境无关。所以，当执行 returnFunvar() 时，就是执行 fun 函数中 inFun 指向的那个匿名函数，而不是 inFun 函数。因为 fun 函数已经执行结束，inFun 已经被释放。当那个匿名函数执行时，发现自己需要 funVar 这个变量。于是为 funVar 在内存上添加一快空间，此时的 funVar 不在是 fun 中的那个 funVar 了（因为已经释放了），我们给它命名为 funVar1。当该匿名函数执行结束后，同样释放局部变量，但是 funVar1 不属于它的局部变量，所以没有释放（可能带来内存泄露）。同理，var returnFunVar2 = fun(); 中的 funVar 为 funVar2，故有示例一展示的结果。</p>

<pre><code>//示例二：
var fun = function () {
    funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5

// 示例三
var global = 0;
var fun = function () {
    var inFun = function () {
         global++;
         return global;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar1());    // 输出 4
console.log(returnFunVar2());    // 输出 5
</code></pre>

<p>示例二和示例三，不管是隐式还是显式声明的全局变量，因为不会释放变量，所以在闭包中都是指向内存的同一个区域（即指向同一个变量）。故有示例二和示例三的输出结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 简单闭包]]></title>
    <link href="http://harole.github.com/blog/2013/10/25/javascript-simple-closures/"/>
    <updated>2013-10-25T15:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/25/javascript-simple-closures</id>
    <content type="html"><![CDATA[<p>通俗的讲，javascript 中每个函数都是一个闭包，但通常意义上是嵌套的函数能够体现出闭包的特性。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar = fun();
console.log(returnFunVar());    // 输出 1
console.log(returnFunVar());    // 输出 2
console.log(returnFunVar());    // 输出 3
</code></pre>

<p>上面一段代码中，fun() 函数中有一个局部变量 funVar，初值为 0,，还有一个 inFun 函数。inFun 函数将其父作用域，即 fun 函数中的 funVar 变量加 1，并返回 funVar。fun 返回的是 inFun 函数，在外部通过变量 returnFunVar 调用获取 fun 的返回值（即 inFun 函数）。</p>

<!-- more -->


<p>按照通用命令式思维的理解，funVar 是 fun 函数内部的变量，它的生命周期就是 fun 函数的执行周期。当 fun 函数从调用栈中返回时，funVar 变量申请的空间也就释放了。问题是，在 fun 执行结束后，inFun 却引用了”已经释放了“的 funVar ，而且没有报错，每次调用还修改了 funVar。这是为什么呢？</p>

<p>这正是所谓闭包的特性，当一个函数返回它内部定义的一个函数时，就产生了闭包。<strong>闭包不仅只是被返回的函数，还包括函数的定义环境。</strong>大家可能对这里的“定义环境”感到疑惑，可以点击这《<a href="http://www.harole.com/blog/2013/10/25/javascript-understand-closures-deeply/">javascript 闭包原理的深入理解</a>》。 fun 可以产生多个闭包，闭包和闭包之间互不影响，可以认为是工厂里的生产同种部件的不同车间。例如：</p>

<pre><code>var fun = function () {
    var funVar = 0;
    var inFun = function () {
         funVar++;
         return funVar;
    }
    return inFun;
}
var returnFunVar1 = fun();
var returnFunVar2 = fun();
console.log(returnFunVar1());    // 输出 1
console.log(returnFunVar2());    // 输出 1
console.log(returnFunVar1());    // 输出 2
console.log(returnFunVar1());    // 输出 3
console.log(returnFunVar2());    // 输出 2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 数组引用和对象引用]]></title>
    <link href="http://harole.github.com/blog/2013/10/12/javascript-array-quote/"/>
    <updated>2013-10-12T23:22:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/12/javascript-array-quote</id>
    <content type="html"><![CDATA[<pre><code>var a = b = [1,2,3];
a = [];// a 为空数组，b 仍是 [1,2,3]

var a = b = [1,2,3];
a.length = 0;// a，b 为空数组

var a = b = [1,2,3];
a.length = 2;// a，b 为 [1,2]
</code></pre>

<p>总结：换个角度来理解上面那个问题，a, b 都是数组对象 [1,2,3] 的引用，当a = [] 或是 b = [] 改变的只是变量 a，b 的引用对象而已。而是用 a.length = 0 或是 b.length = 0，改变的是数组对象 [1,2,3] 的长度，故有上述实例的结果。</p>

<p>思考：上述数组 a 和 b 保存的都只是数组 [1,2,3] 的引用，那么对与 Object 是否也是引用呢？猜想，引用规则对 Object 同样适用。</p>

<!-- more -->


<p>验证猜想：</p>

<pre><code>// a 为null，b 仍是 { one: 1, two: 2, three: 3 }
var a = b = { one: 1, two: 2, three: 3 };
a = null;

// a，b 为{ one: 1, two: 2 }
var a = b = { one: 1, two: 2, three: 3 };
delete a.three;

// a，b 为 {}
var a = b = { one: 1, two: 2, three: 3 };
for ( number in a ) {

    // 为什么这里使用 [] 的方式调用对象的属性？
    // 因为 for/in 语句，将字面量 one 等转换成字符串 "one" 等
    // 所以 a.number 会变成 a."one"等, 故无法访问
    // 而 a[number] 为 a["one"]，可以正常访问
    delete a[number];
}
</code></pre>

<p>总结：javascript 中两个变量之间赋值传递一个对象或数组，传递的是这个对象或数组的引用。但是在实际中我们希望的是进行拷贝。那么如何实现对象或数组间的拷贝呢？请看《<a href="http://www.harole.com/blog/2013/10/26/javascript-shallow-deep-cope/">javascript 对象与数组的浅拷贝和深拷贝</a>》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么C语言中数组下标从0开始？]]></title>
    <link href="http://harole.github.com/blog/2013/10/11/c-language-array-start-zero/"/>
    <updated>2013-10-11T20:49:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/11/c-language-array-start-zero</id>
    <content type="html"><![CDATA[<p>最近学习了汇编语言，和一些反汇编调试程序的方法，对语言的实现有了更深的认识。也明白了C语言的数组下标为什么从零开始。有两种理解方式，一般理解和从反汇编代码的角度理解。</p>

<p>首先要理解什么是物理地址：</p>

<blockquote><p>CPU 被划分为不同的段，物理地址由 CS 和 IP 构成，对内存地址进行控制。CS 是基地址（段基址），IP 是偏移地址。CPU 以8086为例：假设 CS 为 2000（16进制），IP 为 0001（16进制），那么物理地址为 CS<em>16 + IP, CS</em>16 即 2000 左移一位 20000， 故物理地址 = 20000 + 0001 = 20001（构成20位的物理地址）。</p></blockquote>

<!-- more -->


<ol>
<li><p>一般理解（粗略理解），可认为是以下方式</p>

<p> 如果下标 i（用下标表示偏移地址）是从 1 开始的，则赋值时我们需要，获得的物理地址 = CS * 16 + (i - 1)，即每次赋值都需要多执行一次减法；</p>

<p> <img src="http://harole.github.com/images/2013-10-11-22-39-57.png" alt="all have content" /></p>

<p> 如果下标 i（用下标表示偏移地址）是从 0 开始的，则赋值时，获取的物理地址 = CS * 16 + i;</p>

<p> <img src="http://harole.github.com/images/2013-10-11-cpu.png" alt="all have content" /></p>

<p> 总结：如果数组比较大，则两种方式在时间复杂度上，数组下标从零开始更优！故数组从 0 开始。</p></li>
<li><p>从反汇编的角度来理解（细节理解）</p>

<p> <img src="http://harole.github.com/images/2013-10-11-22-46-40.png" alt="all have content" /></p>

<p> 001813F6 8B 45 DC             mov         eax,dword ptr [ebp-24h] ，这语句将 [ebp-24h] （即 i 的值）赋给 eax 寄存器；</p>

<p> 001813FC 89 4C 85 E8          mov         dword ptr [ebp+eax<em>4-18h],ecx ，这句将寄存器 ecx 中的值赋给 [ebp+eax</em>4-18h] （即 a[i]），其中 ebp-18h 可以看做 CS，eax*4 为 IP；这里的 4 是4字节（int 类型的长度），这个长度随数组类型的变化而变化。</p>

<p> <img src="http://harole.github.com/images/2013-10-11-23-14-57.png" alt="all have content" /></p>

<p> 同一般理解中的解释一样，如果数组是从 1 开始，即这里的寄存器每次都要做一次减法，同样带来时间复杂度的增加。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery中解决名字（jQuery）和 $ 与其他类库冲突方法---noConflict()解析]]></title>
    <link href="http://harole.github.com/blog/2013/10/11/jquery-noconflict-method/"/>
    <updated>2013-10-11T02:42:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/11/jquery-noconflict-method</id>
    <content type="html"><![CDATA[<h3>jQuery 中 noConflict() 方法如下：</h3>

<pre><code>// jQuery 开头定义变量部分：
var ....,

    _$ = window.$,

    _jQuery = window.jQuer,

    ....;

noConflict: function( deep ) {
    if ( window.$ === jQuery ) {
        window.$ = _$;
    }

    if ( deep &amp;&amp; window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
    }
</code></pre>

<!-- more -->


<pre><code>    return jQuery;
}
...

// jQuery 函数底部
if ( typeof module === "object" &amp;&amp; module &amp;&amp; typeof module.exports === "object" ) {
    // 在执行节点的加载器中，公开 jQuery 作为 module.exports,
    // 因为 module 模式：不能创建全局变量，用户将会储存它作为局部变量
    // 全局变量不能被 Node module 解析。
    // 所以将 jQuery 赋给 module.exports
    module.exports = jQuery;
} else {
    // 不是 module 模式，就把 jQuery 赋给全局
    window.jQuery = window.$ = jQuery;

    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    if ( typeof define === "function" &amp;&amp; define.amd ) {
        define( "jquery", [], function () { return jQuery; } );
    }
}
</code></pre>

<p>总结：在一般的浏览器中，我们看到的是 window.jQuery = window.$ = jQuery，jQuery是全局变量；当我们调用 noConflict 时，window.$ = window.$ 和 window.jQuery = window.jQuery，覆盖了window.jQuery = window.$ = jQuery，使得 jQuery 变成了局部变量，因此不会和其他类库使用的 $ 和 jQuery 这两个变量冲突；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式（RegExp）方法，test() 和 exec() 区别。]]></title>
    <link href="http://harole.github.com/blog/2013/10/07/regexp-test-exec-difference/"/>
    <updated>2013-10-07T19:10:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/07/regexp-test-exec-difference</id>
    <content type="html"><![CDATA[<h4>test() 方法。</h4>

<blockquote><ol>
<li>语法：RegExpObject.test(string)；</li>
<li>作用：用来检测字符串是否匹配某个模式（该模式由 RegExpObject 设置）；</li>
<li>返回值：当 string 含有与 RegExpObject匹配的文本，则返回 true，否则返回 false。</li>
</ol>
</blockquote>

<p>实例：</p>

<pre><code>var str = "this is harole's blog.";
var pattern = new RegExp( "harole" );
var result = pattern.test( "sam harole freestyle" );
alert( "this is harole's blog : " + result );
</code></pre>

<!-- more -->


<h4>exec() 方法。</h4>

<pre><code>1. 语法：RegExpObject.test(string)；
2. 作用：用来获取字符串匹配某个模式（该模式由 RegExpObject 设置）的内容；
3. 返回值：如果存在满足 RegExpObject，则把匹配到的结果依次存入一个数组中，并返回数组；如果没有找到匹配的字符串，则返回 null。
</code></pre>

<h4>match() 方法。</h4>

<pre><code>1. 语法：RegExpObject.test(string)；
2. 作用：用来检测字符串是否匹配某个模式（该模式由 RegExpObject 设置）；
3. 返回值：当 string 含有与 RegExpObject匹配的文本，则返回 true，否则返回 false。
</code></pre>

<p>总结：1. test() 和 exec() 比较：</p>

<p>未完成，请耐心等待。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 异步初始化大数组]]></title>
    <link href="http://harole.github.com/blog/2013/10/05/initbigarrayasync/"/>
    <updated>2013-10-05T17:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/05/initbigarrayasync</id>
    <content type="html"><![CDATA[<pre><code>    // 任何情况下，创建一个定时器造成UI线程暂停，如同它从一个任务切换到下一个任务
    // THRESHOLD 用于防止 javascript 运行超时，DELAY 用来设置函数调用等待时间
    // 为什么 DELAY 设置为15呢？因为 windows 系统上定时器分辨率为 15 毫秒

    var THRESHOLD = 150, DELAY = 15;

    function initBigArrayAsync(max, cb) {
        var r = [], i = 0;

        function init(startTime) {
            while (i &lt; max) {

                // 判断语句，函数执行的当前时间和开始执行时间差
                // 与限定值（THRESHOLD，该值一般比超时时间小）比较
                // 当小于 THRESHOLD，可进行正常赋值
                if (new Date - startTime &lt; THRESHOLD) {
                    r[i++] = i;
                } else {
</code></pre>

<!-- more -->


<pre><code>                    // 当不小于 THRESHOLD 时，继续执行函数可能会超时
                    // 所以用一个很小的等待时间 DELAY，来从新调用 init() 进行赋值
                    setTimeout(function() {
                        init(new Date);
                    }, DELAY);
                    return;
                }
            }

            cb(r);
        }

        init(new Date);
    }

    // 该函数用于检测，是否成功给大数组赋值
    initBigArrayAsync(1000000, function(arr) {
        console.log(arr.length);
        console.log(arr[1000000 - 1]);
    });
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 循环（for，while）那些事儿！]]></title>
    <link href="http://harole.github.com/blog/2013/10/05/looping-techniques-javascript/"/>
    <updated>2013-10-05T00:16:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/05/looping-techniques-javascript</id>
    <content type="html"><![CDATA[<ol>
<li><p>for 类循环</p>

<ol>
<li><p>for-in 循环的一般形式</p>

<pre><code> // i 可以是数组的下标，也可以是对象的属性
 // arr 可以是数组，也可以是对象
 for ( i in arr ) {

     // 如需匹配特定的值
     // 可以使用一个判断语句
     // definited 为匹配值的变量
     if ( arr[i] === definited ) {

     }
 }
</code></pre>

<p>总结：for-in 语句不仅可以对数组循环遍历，还可以对对象的属性循环遍历
<!-- more --></p></li>
<li><p>for 循环一般形式</p>

<pre><code> for ( var i = 0; i &lt; arr.length; i++ ) {

 }
</code></pre>

<p>总结：每次都需要去查找数组的 length 属性，可以通过缓存 length 来稍微提升遍历的速度</p></li>
<li><p>for 缓存数组的 length 属性</p>

<pre><code> for ( var i = 0, l = arr.length; i &lt; l; i++ ) {

 }
</code></pre>

<p>总结：如果遍历的是HTMLCollection，性能提升比较明显。因为每次访问HTMLCollection的属性，HTMLCollection都会内部匹配一次所有的节点。</p></li>
<li><p>遍历数组操作中，不判断下标，直接判断数组元素是否存在，再对元素进行操作。</p>

<pre><code> var currentItem;
 for ( var i = 0; items[i]; i++ ) {
     currentItem = items[i];
 }

 // 例如：遍历 DOM 子元素
 for ( node = parent.firstChild; node; node = node.nextSibling ) {
     if ( node.nodeType === 1 ) {
         node.nodeIndex = ++count;
     }
 }
</code></pre></li>
<li><p>在迭代中，要尽可能少遍历，如果知道从 position 开始。</p>

<pre><code> var currentItem;
 for ( var i = position || 0, l = items.length; i &lt; l; i++ ) {
     currentItem = items[i];
 }
</code></pre></li>
<li><p>倒序遍历可以减少几个字符。</p>

<pre><code> for ( var i = items.length, currentItem; i; ) {
     currentItem = items[--i];  // 合并了 i 自减和 i 取值的操作
 }
</code></pre></li>
</ol>
</li>
<li><p>while 循环</p>

<ol>
<li><p>通过 while 检测下标遍历。</p>

<pre><code> var l = arr.length, currentItem;
 while ( --l ) {
     currentItem = arr[l];
 }
</code></pre></li>
<li><p>while 检测元素</p>

<pre><code> var findType, i = 0;
 while ( findType == arr[i++] ) {
     // 一些操作
 }
</code></pre></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function()构造函数，即用 new Function() 方式构造函数]]></title>
    <link href="http://harole.github.com/blog/2013/10/01/new-function/"/>
    <updated>2013-10-01T14:38:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/01/new-function</id>
    <content type="html"><![CDATA[<p>一. 下面是使用Functin()构造函数来创建一个函数的例子：</p>

<pre><code>var f = new Function( "x", "y", "return x + y;" );
</code></pre>

<p>这行代码创建了一个新函数，这个函数和下面的定义基本相等</p>

<pre><code>function f( x, y ){
    return x + y;
}
</code></pre>

<p>Function构造函数期待任意数目的 <strong>字符串</strong> 参数，其中最后一个参数（它可以包含任意多条 javascript 语句）是函数的函数体，其他均是函数的参数。如果需要定义一个没有参数的函数体，只需向构造函数传入一个字符串参数，也就是函数体。</p>

<!-- more -->


<p>二. 关于Function()构造函数需要理解以下几点：</p>

<pre><code>* Function()构造函数润允许javascript代码被动态地创建而且在运行时编译。
  全局的eval()函数也是这种方式。

* Function()构造函数解析函数体，并且每次被调用时都创建一个新的函数对象。

    缺点：如果构造函数的调用出现在一个循环中，或者出现在一个经常被调用的函数中，
          那么过程的效率将会很低。

    优点：如果构造函数的调用出现在一个循环或是函数中的直接量中的函数直接量或者
          嵌套的函数，并不会每次遇到的时候都编译。

* Function()构造函数，他所创建的函数并不适用词法作用域，而是当作顶层的函数一样编译。
  如下面代码所示:
  var y = "global";
function a(){

    var y = "local1";
    function constructFunction() {
        var y = "local";
        return new Function("return y;");
    }

    // 这里 constructFunction()()
    // 第一个 '()' 是执行 constructFunction 函数
    // 第二个 '()' 是执行constructFunction 函数返回的 'new Function()' 函数。
    alert(constructFunction()()); // 显示global
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[函数方法call()和apply()的使用和区别]]></title>
    <link href="http://harole.github.com/blog/2013/09/29/func-method-call-and-apply/"/>
    <updated>2013-09-29T22:40:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/09/29/func-method-call-and-apply</id>
    <content type="html"><![CDATA[<p><strong>call()</strong> 方法和 <strong>apply()</strong> 方法的第一个参数都是要调用的函数对象，在函数体内这一参数是关键字 <strong>this</strong> 的值。call()剩余的参数是传递给要调用的函数的值。</p>

<pre><code>var O = {};

function f( a, b ) {
    console.log(a);
    console.log(b);
}

// call()方法的使用，当前 **this** 指向的是对象O
f.call( O, 1, 2 );

// call()方法的实现与下面代码实现相似，可以通过下面的代码来理解call()的使用。
O.m = f;
O.m();
delete O.m;

// apply()方法和call()方法相似，区别在于apply传递给函数的参数是由数组指定的：
f.apply( O, [1,2] );
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid Exception: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)]]></title>
    <link href="http://harole.github.com/blog/2013/09/26/liquid-exception-incompatible-encoding-regexp-match-ascii-8bit-regexp-with-utf-8-string/"/>
    <updated>2013-09-26T15:05:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/09/26/liquid-exception-incompatible-encoding-regexp-match-ascii-8bit-regexp-with-utf-8-string</id>
    <content type="html"><![CDATA[<p>很久没有写文章，准备些文章时，突然发现 octopress 出问题了（呜呜~，都怪写文章太少了）。rake generate    总是报错&#8221;Liquid Exception: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)&#8221;，折腾了一上午，生不如死，总在 google 或 stackoverflow 。上看，还是英文查询！后来才发现我错了，中文搜索一下就出来了。真是不该不相信国人哈！</p>

<!-- more -->


<p>有两种方法：</p>

<blockquote><p><1>直接将<a href="https://github.com/ctdk/octopress-category-list">github上插件中</a>的 category_list.rb 替换 plugins 中的 category_list.rb
<2>在安装目录下修改 lib/jekyll/converters/markdown.rb，在将最后一个 html 改成 html = html.force_encoding(&#8216;utf-8&#8217;)</p></blockquote>

<p>第一种方法,确实可以成功；第二种，我实践了，但是没有成功，可能是问题有些差异。以上两种方法，分别来自 <a href="http://ayang1588.github.io/blog/2013/04/01/buildblog/">http://ayang1588.github.io/blog/2013/04/01/buildblog/</a> 和 <a href="http://blog.t-xx.me/blog/2013/08/25/octopress-utf-8-ascii-8bit-conflict-error/">http://blog.t-xx.me/blog/2013/08/25/octopress-utf-8-ascii-8bit-conflict-error/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[input ie6,7下双边距问题]]></title>
    <link href="http://harole.github.com/blog/2013/05/19/input-ie67/"/>
    <updated>2013-05-19T10:46:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/05/19/input-ie67</id>
    <content type="html"><![CDATA[<p>一. 先来看 input 产生的几个问题。</p>

<p>情况一：</p>

<hr />

<pre><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;test&lt;/title&gt;         

    &lt;style type="text/css"&gt;

    /* 去除默认的 padding 和 margin */
    * {
        margin: 0;
        padding: 0;
    }

    .has-margins {
        background-color: gray;
        margin-left: 5em;        
    }
    .has-layout {
        background-color: tan;
        width: 30em;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-layout"&gt;
                INPUT tag, type=text:&lt;br&gt;
                &lt;input type="text"&gt;&lt;br&gt;
                INPUT tag, type=checkbox:&lt;br&gt;
                &lt;input type="checkbox"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;      

    &lt;!-- 注释2 --&gt;
    &lt;!-- &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-margins"&gt;
                &lt;div class="has-layout"&gt;
                    INPUT tag, type=text:&lt;br&gt;
                    &lt;input type="text"&gt;&lt;br&gt;
                    INPUT tag, type=checkbox:&lt;br&gt;
                    &lt;input type="checkbox"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt; --&gt; 
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>ie6，7 下 input 和 .has-margin 之间多了 80px（即 .box 的 margin-left 的同时也复制给了 input），如下图:</p>

<p><img src="http://harole.github.com/images/2013-05-19-input-ie67.png" alt="all have content" /></p>

<!-- more -->


<p>如果将之前的form注释掉，使用注释二中的代码，会得到下图：</p>

<p><img src="http://harole.github.com/images/2013-06-02-input-ie67-01.png" alt="all have content" /></p>

<p>出现上述bug的原因是，.has-layout 中的 CSS “width: 30em” 出发了 haslayout 让 input 具有继承所有祖先元素的 margin-left 的总和的特性！所以有了上述情况，同理可以将 “width: 30em” 换成 “zoom: 1;”等触发 haslayout ，可以达到同样的结果！</p>

<p>解决方案：</p>

<ol>
<li><p>方案一：
在 input 前加上文本，或是加上 label 元素等行内元素。这也是我们很少发现 bug 的原因，一般而言我们都在 input 的前加上了 label 元素。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;label for=""&gt;Text:&lt;/label&gt; &lt;input type="text"&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>方案二：
给 input 元素包上 span等，只要是没有触发 haslayout 的元素皆可。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;span&gt;&lt;input type="text"&gt;&lt;/span&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>注：并不是所有的 input 元素都会产生此 bug，也许你已经发现前面的 checkbox 就没有此 bug，还有radio，image inputs 会打破 haslayout 因此不会产生 bug！</p></li>
</ol>


<p><strong>原文请链接:</strong><a href="http://www.positioniseverything.net/explorer/inherited_margin.html">http://www.positioniseverything.net/explorer/inherited_margin.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlphamageLoader滤镜解决ie6下png图片透明带来的问题]]></title>
    <link href="http://harole.github.com/blog/2013/04/23/alphamageloader-problem/"/>
    <updated>2013-04-23T22:45:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/23/alphamageloader-problem</id>
    <content type="html"><![CDATA[<p>一. 图片定位</p>

<blockquote><ol>
<li><1>无法使用backgroun-position对图片定位;</li>
<li><2>因为“<1>”导致无法使用CSS Sprite，无法减少http请求;</li>
<li><3>当前大多数网站使用的图片较多，特别在大型网站，因为 “<2>”
将会严重影响页面的加载速度。</li>
</ol>
</blockquote>

<!-- more -->


<p>二. 冻结浏览器</p>

<blockquote><ol>
<li><1> 使用滤镜之后，页面不在支持CSS的渐进渲染了;</li>
<li><2> 在所有必须的组件下载完成之前，页面都是一片空白；</li>
<li><3> ie6会再所以CSS都下载完成后才开始渲染，但是CSS缺依赖于一张经过滤镜处理的图片，所以渲染要等到图片（经过滤镜处理的）加载完成才开始;</li>
<li><4> 如果一个页面上有10张滤镜处理的图片，每张图片加载需要2秒，那么页面的渲染就需要停滞20秒。</li>
</ol>
</blockquote>

<p>总结：在页面中少使用滤镜，否则性能会大大的降低。</p>
]]></content>
  </entry>
  
</feed>
