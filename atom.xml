<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harole's blog]]></title>
  <link href="http://harole.github.com/atom.xml" rel="self"/>
  <link href="http://harole.github.com/"/>
  <updated>2013-10-05T20:47:34+08:00</updated>
  <id>http://harole.github.com/</id>
  <author>
    <name><![CDATA[harole]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript 异步初始化大数组]]></title>
    <link href="http://harole.github.com/blog/2013/10/05/initbigarrayasync/"/>
    <updated>2013-10-05T17:26:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/05/initbigarrayasync</id>
    <content type="html"><![CDATA[<pre><code>    var THRESHOLD = 150, DELAY = 15;

    function initBigArrayAsync(max, cb) {
        var r = [], i = 0;

        function init(startTime) {
            while (i &lt; max) {
                if (new Date - startTime &lt; THRESHOLD) {
                    r[i++] = i;
                } else {
                    setTimeout(function() {
                        init(new Date);
                    }, DELAY);
                    return;
                }
            }

            cb(r);
        }

        init(new Date);
    }

    initBigArrayAsync(1000000, function(arr) {
        console.log(arr.length);
        console.log(arr[1000000 - 1]);
    });
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript 循环（for，while）那些事儿！]]></title>
    <link href="http://harole.github.com/blog/2013/10/05/looping-techniques-javascript/"/>
    <updated>2013-10-05T00:16:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/05/looping-techniques-javascript</id>
    <content type="html"><![CDATA[<ol>
<li><p>for 类循环</p>

<ol>
<li><p>for-in 循环的一般形式</p>

<pre><code> // i 可以是数组的下标，也可以是对象的属性
 // arr 可以是数组，也可以是对象
 for ( i in arr ) {

     // 如需匹配特定的值
     // 可以使用一个判断语句
     // definited 为匹配值的变量
     if ( arr[i] === definited ) {

     }
 }
</code></pre>

<p>总结：for-in 语句不仅可以对数组循环遍历，还可以对对象的属性循环遍历
<!-- more --></p></li>
<li><p>for 循环一般形式</p>

<pre><code> for ( var i = 0; i &lt; arr.length; i++ ) {

 }
</code></pre>

<p>总结：每次都需要去查找数组的 length 属性，可以通过缓存 length 来稍微提升遍历的速度</p></li>
<li><p>for 缓存数组的 length 属性</p>

<pre><code> for ( var i = 0, l = arr.length; i &lt; l; i++ ) {

 }
</code></pre>

<p>总结：如果遍历的是HTMLCollection，性能提升比较明显。因为每次访问HTMLCollection的属性，HTMLCollection都会内部匹配一次所有的节点。</p></li>
<li><p>遍历数组操作中，不判断下标，直接判断数组元素是否存在，再对元素进行操作。</p>

<pre><code> var currentItem;
 for ( var i = 0; items[i]; i++ ) {
     currentItem = items[i];
 }

 // 例如：遍历 DOM 子元素
 for ( node = parent.firstChild; node; node = node.nextSibling ) {  
     if ( node.nodeType === 1 ) {  
         node.nodeIndex = ++count;  
     }  
 }
</code></pre></li>
<li><p>在迭代中，要尽可能少遍历，如果知道从 position 开始。</p>

<pre><code> var currentItem;
 for ( var i = position || 0, l = items.length; i &lt; l; i++ ) {
     currentItem = items[i];
 }
</code></pre></li>
<li><p>倒序遍历可以减少几个字符。</p>

<pre><code> for ( var i = items.length, currentItem; i; ) {
     currentItem = items[--i];  // 合并了 i 自减和 i 取值的操作
 }    
</code></pre></li>
</ol>
</li>
<li><p>while 循环</p>

<ol>
<li><p>通过 while 检测下标遍历。</p>

<pre><code> var l = arr.length, currentItem;
 while ( --l ) {
     currentItem = arr[l];
 }
</code></pre></li>
<li><p>while 检测元素</p>

<pre><code> var findType, i = 0;
 while ( findType == arr[i++] ) {
     // 一些操作 
 }
</code></pre></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function()构造函数，即用 new Function() 方式构造函数]]></title>
    <link href="http://harole.github.com/blog/2013/10/01/new-function/"/>
    <updated>2013-10-01T14:38:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/10/01/new-function</id>
    <content type="html"><![CDATA[<p>一. 下面是使用Functin()构造函数来创建一个函数的例子：</p>

<pre><code>var f = new Function( "x", "y", "return x + y;" );
</code></pre>

<p>这行代码创建了一个新函数，这个函数和下面的定义基本相等</p>

<pre><code>function f( x, y ){
    return x + y;
}
</code></pre>

<p>Function构造函数期待任意数目的 <strong>字符串</strong> 参数，其中最后一个参数（它可以包含任意多条 javascript 语句）是函数的函数体，其他均是函数的参数。如果需要定义一个没有参数的函数体，只需向构造函数传入一个字符串参数，也就是函数体。</p>

<!-- more -->


<p>二. 关于Function()构造函数需要理解以下几点：</p>

<pre><code>* Function()构造函数润允许javascript代码被动态地创建而且在运行时编译。
  全局的eval()函数也是这种方式。

* Function()构造函数解析函数体，并且每次被调用时都创建一个新的函数对象。

    缺点：如果构造函数的调用出现在一个循环中，或者出现在一个经常被调用的函数中，
          那么过程的效率将会很低。

    优点：如果构造函数的调用出现在一个循环或是函数中的直接量中的函数直接量或者
          嵌套的函数，并不会每次遇到的时候都编译。

* Function()构造函数，他所创建的函数并不适用词法作用域，而是当作顶层的函数一样编译。
  如下面代码所示:
  var y = "global";
function a(){

    var y = "local1";
    function constructFunction() {
        var y = "local";
        return new Function("return y;");
    }

    // 这里 constructFunction()()
    // 第一个 '()' 是执行 constructFunction 函数
    // 第二个 '()' 是执行constructFunction 函数返回的 'new Function()' 函数。
    alert(constructFunction()()); // 显示global
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[函数方法call()和apply()的使用和区别]]></title>
    <link href="http://harole.github.com/blog/2013/09/29/func-method-call-and-apply/"/>
    <updated>2013-09-29T22:40:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/09/29/func-method-call-and-apply</id>
    <content type="html"><![CDATA[<p><strong>call()</strong> 方法和 <strong>apply()</strong> 方法的第一个参数都是要调用的函数对象，在函数体内这一参数是关键字 <strong>this</strong> 的值。call()剩余的参数是传递给要调用的函数的值。</p>

<pre><code>var O = {};

function f( a, b ) {
    console.log(a);
    console.log(b);
}   

// call()方法的使用，当前 **this** 指向的是对象O
f.call( O, 1, 2 );

// call()方法的实现与下面代码实现相似，可以通过下面的代码来理解call()的使用。    
O.m = f;
O.m();
delete O.m;

// apply()方法和call()方法相似，区别在于apply传递给函数的参数是由数组指定的：
f.apply( O, [1,2] );
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid Exception: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)]]></title>
    <link href="http://harole.github.com/blog/2013/09/26/liquid-exception-incompatible-encoding-regexp-match-ascii-8bit-regexp-with-utf-8-string/"/>
    <updated>2013-09-26T15:05:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/09/26/liquid-exception-incompatible-encoding-regexp-match-ascii-8bit-regexp-with-utf-8-string</id>
    <content type="html"><![CDATA[<p>很久没有写文章，准备些文章时，突然发现 octopress 出问题了（呜呜~，都怪写文章太少了）。rake generate    总是报错&#8221;Liquid Exception: incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)&#8221;，折腾了一上午，生不如死，总在 google 或 stackoverflow 。上看，还是英文查询！后来才发现我错了，中文搜索一下就出来了。真是不该不相信国人哈！</p>

<!-- more -->


<p>有两种方法：</p>

<blockquote><p><1>直接将<a href="https://github.com/ctdk/octopress-category-list">github上插件中</a>的 category_list.rb 替换 plugins 中的 category_list.rb
<2>在安装目录下修改 lib/jekyll/converters/markdown.rb，在将最后一个 html 改成 html = html.force_encoding(&#8216;utf-8&#8217;)</p></blockquote>

<p>第一种方法,确实可以成功；第二种，我实践了，但是没有成功，可能是问题有些差异。以上两种方法，分别来自 <a href="http://ayang1588.github.io/blog/2013/04/01/buildblog/">http://ayang1588.github.io/blog/2013/04/01/buildblog/</a> 和 <a href="http://blog.t-xx.me/blog/2013/08/25/octopress-utf-8-ascii-8bit-conflict-error/">http://blog.t-xx.me/blog/2013/08/25/octopress-utf-8-ascii-8bit-conflict-error/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[input ie6,7下双边距问题]]></title>
    <link href="http://harole.github.com/blog/2013/05/19/input-ie67/"/>
    <updated>2013-05-19T10:46:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/05/19/input-ie67</id>
    <content type="html"><![CDATA[<p>一. 先来看 input 产生的几个问题。</p>

<p>情况一：</p>

<hr />

<pre><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;test&lt;/title&gt;         

    &lt;style type="text/css"&gt;

    /* 去除默认的 padding 和 margin */
    * {
        margin: 0;
        padding: 0;
    }

    .has-margins {
        background-color: gray;
        margin-left: 5em;        
    }
    .has-layout {
        background-color: tan;
        width: 30em;
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-layout"&gt;
                INPUT tag, type=text:&lt;br&gt;
                &lt;input type="text"&gt;&lt;br&gt;
                INPUT tag, type=checkbox:&lt;br&gt;
                &lt;input type="checkbox"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;      

    &lt;!-- 注释2 --&gt;
    &lt;!-- &lt;form action="ignore"&gt;            
        &lt;div class="has-margins"&gt;
            &lt;div class="has-margins"&gt;
                &lt;div class="has-layout"&gt;
                    INPUT tag, type=text:&lt;br&gt;
                    &lt;input type="text"&gt;&lt;br&gt;
                    INPUT tag, type=checkbox:&lt;br&gt;
                    &lt;input type="checkbox"&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt; --&gt; 
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>ie6，7 下 input 和 .has-margin 之间多了 80px（即 .box 的 margin-left 的同时也复制给了 input），如下图:</p>

<p><img src="http://harole.github.com/images/2013-05-19-input-ie67.png" alt="all have content" /></p>

<!-- more -->


<p>如果将之前的form注释掉，使用注释二中的代码，会得到下图：</p>

<p><img src="http://harole.github.com/images/2013-06-02-input-ie67-01.png" alt="all have content" /></p>

<p>出现上述bug的原因是，.has-layout 中的 CSS “width: 30em” 出发了 haslayout 让 input 具有继承所有祖先元素的 margin-left 的总和的特性！所以有了上述情况，同理可以将 “width: 30em” 换成 “zoom: 1;”等触发 haslayout ，可以达到同样的结果！</p>

<p>解决方案：</p>

<ol>
<li><p>方案一：
在 input 前加上文本，或是加上 label 元素等行内元素。这也是我们很少发现 bug 的原因，一般而言我们都在 input 的前加上了 label 元素。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;label for=""&gt;Text:&lt;/label&gt; &lt;input type="text"&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>方案二：
给 input 元素包上 span等，只要是没有触发 haslayout 的元素皆可。
<form action="ignore"></p>

<pre><code>&lt;div class="has-margins"&gt;
  &lt;div class="has-layout"&gt;
    INPUT tag, type=text, preceeded by inline text:&lt;br&gt;
    Text: &lt;input type="text"&gt;&lt;br&gt;
    &lt;span&gt;&lt;input type="text"&gt;&lt;/span&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form></p></li>
<li><p>注：并不是所有的 input 元素都会产生此 bug，也许你已经发现前面的 checkbox 就没有此 bug，还有radio，image inputs 会打破 haslayout 因此不会产生 bug！</p></li>
</ol>


<p><strong>原文请链接:</strong><a href="http://www.positioniseverything.net/explorer/inherited_margin.html">http://www.positioniseverything.net/explorer/inherited_margin.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AlphamageLoader滤镜解决ie6下png图片透明带来的问题]]></title>
    <link href="http://harole.github.com/blog/2013/04/23/alphamageloader-problem/"/>
    <updated>2013-04-23T22:45:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/23/alphamageloader-problem</id>
    <content type="html"><![CDATA[<p>一. 图片定位</p>

<blockquote><ol>
<li><1>无法使用backgroun-position对图片定位;</li>
<li><2>因为“<1>”导致无法使用CSS Sprite，无法减少http请求;</li>
<li><3>当前大多数网站使用的图片较多，特别在大型网站，因为 “<2>”
将会严重影响页面的加载速度。</li>
</ol>
</blockquote>

<!-- more -->


<p>二. 冻结浏览器</p>

<blockquote><ol>
<li><1> 使用滤镜之后，页面不在支持CSS的渐进渲染了;</li>
<li><2> 在所有必须的组件下载完成之前，页面都是一片空白；</li>
<li><3> ie6会再所以CSS都下载完成后才开始渲染，但是CSS缺依赖于一张经过滤镜处理的图片，所以渲染要等到图片（经过滤镜处理的）加载完成才开始;</li>
<li><4> 如果一个页面上有10张滤镜处理的图片，每张图片加载需要2秒，那么页面的渲染就需要停滞20秒。</li>
</ol>
</blockquote>

<p>总结：在页面中少使用滤镜，否则性能会大大的降低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ie6 下 png 图片透明，滤镜解决方案]]></title>
    <link href="http://harole.github.com/blog/2013/04/21/ie6-png/"/>
    <updated>2013-04-21T23:36:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/21/ie6-png</id>
    <content type="html"><![CDATA[<p>一. 正常情况下（ie6下回出现半透明）：</p>

<pre><code>/* 注：这里一般使用 png24 */
background: url("../images/test.png");
</code></pre>

<p>二. 解决方案：</p>

<pre><code>/* 注： 图片的路径使用的是相对路径 */
background: url("../images/test.png");

/* ie6 下将背景移除 */
_background:none;   

/* 使用AlphaImageLoader滤镜重新加载图片 */
_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src="../images/test.png");
</code></pre>

<!-- more -->


<p>三. 注：上述解决方案在ie6下，有时图片会覆盖文本导致文本消失。</p>

<pre><code>/* 我们需要给滤镜加上一行设置, 即sizingMethod="crop"
 * 使得剪切图片以适应对象的尺寸边界。  
 */
_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src="../images/test.png", sizingMethod="crop");    
</code></pre>

<p><strong>
<a href="http://hi.baidu.com/zygalcn/item/6f9946b8900c33d385dd79e6">更多关于ALphaImageLoader滤镜的属性</a>
</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个块级元素 display:inline-block，其中一个没有内容导致两元素不在一条直线上]]></title>
    <link href="http://harole.github.com/blog/2013/04/10/inline-block-drop/"/>
    <updated>2013-04-10T21:58:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/10/inline-block-drop</id>
    <content type="html"><![CDATA[<p>一. div.left 和 div.right 均有内容。</p>

<pre><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;inline-cblock&lt;/title&gt;
    &lt;style type="text/css"&gt;
    .box {
        width: 400px;
        height: 100px;
        margin: 50px auto;
        background: black;
        /* S-- 用于清除排版时 left 和 right 之间的间隙 */
        letter-spacing: -3px;
        font-size: 0;       
        /* E-- 用于清除排版时 left 和 right 之间的间隙 */
    }
    .box .left {
        display: inline-block;
        width: 200px;
        height: 100px;
        font-size: 50px;
        background: yellow;
    }
    .box .right {
        display: inline-block;
        width: 200px;
        height: 100px;  
        font-size: 50px;   
        background: blue;       
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="box"&gt;
        &lt;div class="left"&gt;Left&lt;/div&gt;
        &lt;div class="right"&gt;Right&lt;/div&gt;
    &lt;/div&gt;  
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>预期效果：
<img src="http://harole.github.com/images/inline-block-01.png" alt="all have content" /></p>

<p>二. 仅把 div.left 中的内容去掉，效果：
<img src="http://harole.github.com/images/inline-block-02.png" alt="all have content" /></p>

<!-- more -->


<p>三. 仅把 div.right 中的内容去掉
<img src="http://harole.github.com/images/inline-block-03.png" alt="all have content" /></p>

<p>问题“二”和“三”解决办法：</p>

<blockquote><p>方案一：</p>

<pre><code>.box .left {
    verical-align: top;
}
.box .right {
    verical-align: top;
} 
</code></pre>

<p>方案二：</p>

<pre><code>.box .left {
    verical-align: middle;
}
.box .right {
    verical-align: middle;
} 
</code></pre>

<p>方案三:</p>

<pre><code>.box .left {
    verical-align: top;
}
</code></pre>

<p>或者</p>

<pre><code>.box .right {
    verical-align: top;
}
</code></pre></blockquote>

<p>总结（对方案的理解）：</p>

<blockquote><p>对于方案一和方案二的解决，可能会好奇如果都 vertical-align：baseline; 能否解决，答案是否定的。</p>

<p>vertical-align 默认是 baseline，当 left 和 right 其中之一缺少内容，缺少内容的那个 div
的 baseline 在容器本身的底部，另外一个有内容的 div 和缺少内容的 div 的 baseline 对齐导致了有内容的 div 掉了下来。</p>

<p>问题一：对于上面的“有内容的 div 和缺少内容的 div 的 baseline 对齐导致了有内容的 div 掉了下来”会有个疑问，即“为什么是有内容的 div 和没有内容 div 的对齐，而不是没有内容的和有内容的 div 对齐呢？”</p>

<p>其实也可以看做是没有内容的 div 和有内容的 div 对齐，因为浏览器的默认是向下排版的所以向下溢出了，而没有向上溢出。</p>

<p>问题二：对于方案一和方案二都可以理解了，那为什么方案三也可以呢？</p>

<p>当缺少内容的 div 设置了 “verti-align: top;”， 有内容的 div 和它对齐（也可以看做它和有内容的 div 对齐，原因看问题一的解答），就达到期望的显示了。</p>

<p>当有内容的 div 设置了 “verti-align: top;” ，当然就回到 div.box 的顶部了，至于没有内容的 div 为什么没有和有内容的 div 对齐呢？原因和问题一的解答是一样的，没有内容的 div 尝试对齐，但是它不能向上溢出。</p></blockquote>

<p>关于 vertical-align 相关信息可以参考链接：<a href="http://www.jb51.net/css/10337.html">http://www.jb51.net/css/10337.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像 html 模块化一样，模块化 javascript 事件处理程序，使之可维护！]]></title>
    <link href="http://harole.github.com/blog/2013/04/10/javascript-event-handle/"/>
    <updated>2013-04-10T12:49:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/10/javascript-event-handle</id>
    <content type="html"><![CDATA[<p>一. 常用的事件处理程序</p>

<pre><code>funciton handleClick( event ) {

    var popWindow = document.getElementById("popWindow");

    popWindow.style.left = event.clientX + "px";
    popWindow.style.top = event.clientY + "px"; 

    popWindow.className = "visible";

}
addListener(element, "click", handleClcik); 
</code></pre>

<p>上述程序功能：监听 &#8220;element&#8221; 元素的 click 事件，当触发 click 事件时，显示一个窗口到当前鼠标位置。</p>

<p>缺点：事件处理程序包含了应用逻辑，即应用逻辑只和 click 事件相关。但是 mousehover，mouseup 等其他事件也要实现同样的功能。会有如下实现：</p>

<!-- more -->


<pre><code>// mousehover
funciton handleMouseHover( event ) {

    var popWindow = document.getElementById("popWindow");

    popWindow.style.left = event.clientX + "px";
    popWindow.style.top = event.clientY + "px"; 

    popWindow.className = "visible";

}
addListener(element, "mousehover", handleMouseHover);       

// mouseup
funciton handleMouseUp( event ) {

    var popWindow = document.getElementById("popWindow");

    popWindow.style.left = event.clientX + "px";
    popWindow.style.top = event.clientY + "px"; 

    popWindow.className = "visible";

}
addListener(element, "mousehover", handleMouseUp);      

// 其他事件
......
</code></pre>

<p>很明显上面的代码被复制了多，于是我们又有了如下代码：</p>

<pre><code>// eventHandle
funciton eventHandle( event ) {

    var popWindow = document.getElementById("popWindow");

    popWindow.style.left = event.clientX + "px";
    popWindow.style.top = event.clientY + "px"; 

    popWindow.className = "visible";

}
addListener(element, "click", eventHandle); 
addListener(element, "mousehover", eventHandle);        
addListener(element, "mousehover", eventHandle);    

// 其他监听事件
......
</code></pre>

<p>恩恩，经过两次改进，我们将应用逻辑从事件处理程序中隔离了。但是，问题并没有解决，因为你监听的事件
&#8220;click&#8221;, &#8220;mousehover&#8221;, &#8220;mouseup&#8221;等的处理程序大部分情况下是不一样的。于是有了如下方案：</p>

<p>二. 隔离应用逻辑</p>

<pre><code>var app =  {

    showPopWindow: function (event) {

        var popWindow = document.getElementById("popWindow");

        popWindow.style.left = event.clientX + "px";
        popWindow.style.top = event.clientY + "px";         

    },

    handleClick: function (event) {

        this.showPopWindow( event );

        // click 的其他代码
        ......
    },

    handleMouseHover: function (event) {

        this.showPopWindow( event );

        // mousehover 的其他代码
        ......

    }

    // 其他事件处理函数
    ......      
};

addListener(element, "click", function (event) {
    app.handleClick(event);
});

addListener(element, "mousehover", function (event) {
    app.handleMouseHover(event);
});

// 其他事件的监听
......
</code></pre>

<p>隔离应用逻辑后，代码还存在一个问题，即 event 对象被无节制的分发（event 由 addListener 传入了 app.handleClick 或 app.handleMouseHover，再传入app.showPopWindow）。</p>

<p>三. 不要分发事件对象</p>

<p>应用逻辑 showPopWindow 不应该依赖于 event 对象来完成功能。如果想要测试这个方法，必须重新创建一个 event 对象，否则在函数内无法找到 event.clientX 和 event.clientY，就无法测试。所以做了如下改进：</p>

<pre><code>var app =  {

    showPopWindow: function ( x, y ) {

        var popWindow = document.getElementById("popWindow");

        popWindow.style.left = x + "px";
        popWindow.style.top = y + "px";         

    },

    handleClick: function ( event ) {

        this.showPopWindow( event.clientX, event.clientY );

        // click 的其他代码
        ......
    },

    handleMouseHover: function ( event ) {

        this.showPopWindow( event.clientX, event.clientY );

        // mousehover 的其他代码
        ......

    }

    // 其他事件处理函数
    ......      
};

addListener(element, "click", function (event) {
    app.handleClick(event);
});

addListener(element, "mousehover", function (event) {
    app.handleMouseHover(event);
});

// 其他事件的监听
......

// 当我们想测试的时候，就不在需要重新创建一个event对象了，只需要向下面一样即可
app.showPopWindow( "20", "20" );
</code></pre>

<p>当处理事件时，最好让事件处理程序成为唯一一个接触到 event 对象的函数（即 handleClick 和 handleMouseHover 等）。
事件处理程序应当在进入应用逻辑 showPopWindow 之前对 event 对象执行必要的操作包括阻止默认行为和事件冒泡。最终形成如下代码：</p>

<pre><code>var app =  {

    showPopWindow: function ( x, y ) {

        var popWindow = document.getElementById("popWindow");

        popWindow.style.left = x + "px";
        popWindow.style.top = y + "px";         

    },

    handleClick: function ( event ) {
        // 阻止默认行为
        event.preventDefault();

        // click 的其他代码
        ...... 

        this.showPopWindow( event.clientX, event.clientY );                     
    },

    handleMouseHover: function ( event ) {
        // 阻止默认行为
        event.preventDefault();

        // mousehover 的其他代码
        ......

        this.showPopWindow( event.clientX, event.clientY );

    }

    // 其他事件处理函数
    ......      
};

addListener(element, "click", function (event) {
    app.handleClick(event);
});

addListener(element, "mousehover", function (event) {
    app.handleMouseHover(event);
});

// 其他事件的监听
......
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becoming your story]]></title>
    <link href="http://harole.github.com/blog/2013/04/08/becoming-your-story/"/>
    <updated>2013-04-08T18:34:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/08/becoming-your-story</id>
    <content type="html"><![CDATA[<p>In second grade, I still didn&#8217;t know how to read. I remember sitting at Sunday school and not being able to read the assignment. I tried to hide it and drew pictures instead.</p>


<p></p>

<p>My parents were concerned and had me tested for learning disabilities. They even moved us to a new city. I was so far behind, it took me years to catch up. But, the school was better. In third grade, I started to read.</p>


<p></p>

<p>There&#8217;s something that became part of my ethos then. I was at the bottom. I had to do everything to work my way up. I remember constantly telling myself that I just needed to work harder than everyone.  I had to hustle.</p>


<p></p>

<p>I became my story. I worked hard and I hustled. </p>


<!-- more -->


<p>Everyone has a story. You repeat it in your head every day. It&#8217;s a story of how the world reacts to you and how you react to the world. It&#8217;s a story of patterns, where things are experienced over and over again. </p>


<p>Just as it can be powerful and energizing, it can also be dangerous. If its a tragic story, you become a tragedy. </p>


<p>I remember reading East of Eden and there was a passage that I&#8217;ll always remember. Cal&#8217;s father, trying a new venture, lost all of his money. Cal was smart; he executed on an idea and made a lot of money. When he tried to give it to his father, his father rejected it. Cal goes to his room and burns the money, one note at a time.</p>


<p>His caretaker Lee comes in:  </p>


<p>Are you taken pleasure from this whipping you&#8217;re giving yourself? Are you enjoying your despair?”</p>


<p>“Lee!”</p>


<p>“You’re pretty full of yourself. You’re marveling at the tragic spectacle of Caleb Trask—Caleb the magnificent, the unique. Caleb whose suffering should have its Homer. </p>


<p>Maybe it was easier for Cal to become a tragedy. It was easier to think that what he experienced was uniquely painful.  It was hard to think that many others have suffered, often worse than him. Unique pain has more meaning. </p>


<p>The danger is that you internalize the pain. You become someone who deserves the misfortune and can&#8217;t get away from it. You expect it and it happens. </p>


<p>If your story is of success, of overcoming adversity, you become that story. As you try it, it validates itself and becomes more true. You expect it and it happens. </p>


<p>We have words for these people in the startup world: hustlers, cockroaches (which is a compliment for people and companies that refuse to die), lucky. It&#8217;s the person that surprises us. It&#8217;s a person that shouldn&#8217;t succeed, who gets rejected and ignored, but somehow does and does it with energy. </p>


<p>When you tell yourself your story, pause and think it over. Be a force, be a hustler, be creative, be lucky, but don&#8217;t be a tragedy. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些，曾经]]></title>
    <link href="http://harole.github.com/blog/2013/04/08/thoese-who-we-are/"/>
    <updated>2013-04-08T16:57:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/08/thoese-who-we-are</id>
    <content type="html"><![CDATA[<p>叶的离开，是风的追求，还是树的不挽留。</p>


<p>你不是树，怎么知道树没有挽留？</p>


<p>你不是树，怎么知道风不是叶的最好幸福？</p>


<p>你不是树，怎么知道既然知道自己不再强大，又何必再用挽留去阻碍叶的幸福的无奈？</p>


<p>或许，随风飘落，落叶归根便是叶的最好归宿。</p>


<p>无意间，听到广播里诉说着普罗旺斯的薰衣草田，霎时间泪水从眼睛一滴一滴地滑落，落到脸上，落到心里，勾起了许久许久不曾触碰的那些，曾经。</p>


<p>曾经那条走过无数次的小路，那张再心里无数遍复习过的笑脸，那抹无数次魂牵梦萦的身影，此刻都那么真实的想起，那安静而又冷冽的男孩，那快乐而又唯美的曾经。</p>


<!-- more -->


<p>我们总是“无意”地相逢，总是一前一后地走在上学的路上，总是在茫茫人海中寻找着彼此的身影，我们就这样默默地注视着对方的背影，默默地宣泄着自己的感情，可是我们却从未说过一句话，一切尽在不言中，我们有着心照不宣的默契。想着想着眼中就充满了甜蜜，从眼里，到心里。</p>


<p>还记得第一次见面的那一天，学校集体大扫除，打扫完后几个同学就一起拿着把扫帚回家了，走在一条长长地街道上，同学正在互相说笑着，不经意间回过头看到了一个孤单安静的身影，他抬头，如海洋般深邃的眼睛看着我，我们四目相对，霎那间觉得空气仿佛静止，脑海中想起的薰衣草里主题曲“记忆是阵阵花香….”我顿时明白了小鹿乱撞的心情，我回过头，朝自己笑笑，在心里祈祷有一天能和他一起去看普罗旺斯的薰衣草，因为，那时候我就知道到，薰衣草的花语是，等待爱情。</p>


<p>可是，世事变迁，雕栏玉砌应犹在，只是朱颜改。我毕竟没有等到爱情之花绽放的那一天。如今，那个安静清冷的男孩却不在了，那个期望一起去看薰衣草的梦想也埋藏到了心里，我无法去挽留他，因为我知道我不够强大，不够优秀，既然无法给人幸福，就不要以爱他的方式去阻碍他的幸福。</p>


<p>所以，我放手了。可是我却从未后悔，依旧在祝福着他永远幸福。</p>


<p>那些微笑，那抹背影，那些画面，却被我永久珍藏在心里，一辈子，不忘记。</p>


<p>“那些，曾经，刻骨铭心！”</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爱的一种解释]]></title>
    <link href="http://harole.github.com/blog/2013/04/08/love-explanation/"/>
    <updated>2013-04-08T14:31:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/08/love-explanation</id>
    <content type="html"><![CDATA[<p>爱是什么？</p>


<p>一个精灵坐在碧绿的枝叶间沉思。</p>


<p>风而若有若无。</p>


<p>一只鸟儿飞过来，停在枝上，望着远处将要成熟的稻田。</p>


<p>精灵取出一束黄澄澄的稻谷问道：“你爱这稻谷吗？”</p>


<p>“爱。”</p>


<p>“为什么？”</p>


<!-- more -->


<p>“它驱赶我的饥饿。”</p>


<p>鸟儿啄完稻谷，轻轻梳理着光润的羽毛。</p>


<p>“现在你爱这稻谷吗？”精灵又取出一束黄澄澄的稻谷。</p>


<p>鸟儿抬头望着远处的一湾泉水回答：“现在我爱那一湾泉水，我有点渴了。”</p>


<p>精灵摘下一片树叶，里面盛了一汪泉水。</p>


<p>鸟儿喝完泉水，准备振翅飞去。</p>


<p>“请再回答我一个问题，”精灵伸出指尖，鸟儿停在上面。</p>


<p>“你要去做什么更重要的事吗？我这里又稻谷也有泉水。”</p>


<p>“我要去那片开着风信子的山谷，去看那朵风信子。”</p>


<p>“为什么？它能驱赶你的饥饿？”</p>


<p>“不能。”</p>


<p>“它能滋润你的干渴？”</p>


<p>“不能。”</p>


<p>“那你为什么要去看它呢？”</p>


<p>“我需要它啊。”</p>


<p>“为什么需要？”</p>


<p>“我爱它啊。”</p>


<p>“为什么爱它？”</p>


<p>“我日日夜夜都在思念它。”</p>


<p>“为什么思念它？”</p>


<p>“我爱它。”</p>


<p>精灵沉默了片刻，又提出一个问题：</p>


<p>“你为什么只爱那一朵风信子呢？山谷里有无数朵风信子。”</p>


<p>“因为它是唯一的一朵啊。”</p>


<p>“为什么？它和其他所有的风信子有什么不同的地方吗？”</p>


<p>“有的。”</p>


<p>“哪里不同呢？”</p>


<p>“只有它才是我爱的那一朵啊。”</p>


<p>精灵忽然轻轻笑了起来，鸟儿振翅而去。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青春是场阵痛，熬得过熬不过，都得过。]]></title>
    <link href="http://harole.github.com/blog/2013/04/06/my-first-blog/"/>
    <updated>2013-04-06T14:00:00+08:00</updated>
    <id>http://harole.github.com/blog/2013/04/06/my-first-blog</id>
    <content type="html"><![CDATA[<p>总是想不明白，青春是因为无处安放才让人无从懂得，还是因为没人懂，所以才没有归处，以致无处安放呢？91年出生的我说自己是90后，应该是名符其实的吧，还没出校门的我一直以为自己还处在那个容易惊慌的年纪，可当我面对我的两个98年的小朋友时，才发现，我的那场阵痛已经过去了。</p>


<p>大概是在六七年前看了《我们无处安放的青春》的电视剧，当时并不知道它的原型是一本小说，也没想到会多年后的今天我会看到这本书，更没想到，当时自己幻想的长大的样子，现在照照镜子就能看见了。</p>


<p>当时是不喜欢那部电视的，因为在那个刚刚好的年纪里，总是喜欢特定的故事情节和结局的，比如说王子和灰姑娘最后幸福快乐地生活在了一起。这个故事里没有王子，没有忠贞不渝，有的是那时的我并不能宽容的背叛，和我不能理解的怯懦与逃避。故事里每个人都不幸福，这让我很伤心，因为总觉得，至少主角得是幸福的啊。</p>


<!-- more -->


<p>慢慢地，开始明白主角的意思。在每个人的生活里，主角都是自己，我们都会有自己的男一号或女一号，发生一段或平平淡淡或轰轰烈烈的故事。当然，在别人的生活里，我们就是那个可轻可重的配角，或者是某个只有一两个镜头的路人甲，是个小小的反派也是有可能的。然后，学相对论那一章时，我理解的特别快。所以，就明白了，自己的故事静静地演才好，因为在观众的眼中，配角的故事永远不会成为焦点，过度的喧哗只会被当做一场闹剧，招来反感。</p>


<p>时间可能真的是太久了，久到一日日微小的变化累积累积，再看时会惊异居然改变了那么多。再看《我们无处安放的青春》这个故事，居然能看懂了，而且里面的每个人，都能懂。明白了李然为什么放弃周蒙，明白了周蒙为什么放弃苦守的诺言，明白了杜晓彬为什么不择手段的得到李然，也明白了小宗、刘漪、李越、潘多，这所有走在成长路上，由男孩儿女孩儿成长为男人女人的年轻人，他们在成长的路上放弃了什么，得到了什么。因为他们也明白了，所以在自己以后的婚姻生活里，即使陪在自己身边的不是当初想的那个人，也过得坦坦然然，不受过往的牵绊，再回忆起曾经的故事时，能报以释然的微微一笑。</p>

]]></content>
  </entry>
  
</feed>
